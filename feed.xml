<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh" /><updated>2020-05-08T17:14:27+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Code for Good</title><subtitle>A blog made by FKYnJYQ, powered by jekyll, archive some personal ideas and thought.
</subtitle><author><name>FKY</name><email>loveress01@outlook.com</email></author><entry><title type="html">记录使用Linux中出现的许多奇奇怪怪的bug以及解决方法</title><link href="http://localhost:4000/linux/debug/2019/07/13/debug.html" rel="alternate" type="text/html" title="记录使用Linux中出现的许多奇奇怪怪的bug以及解决方法" /><published>2019-07-13T09:24:24+08:00</published><updated>2019-07-13T09:24:24+08:00</updated><id>http://localhost:4000/linux/debug/2019/07/13/debug</id><content type="html" xml:base="http://localhost:4000/linux/debug/2019/07/13/debug.html">&lt;p&gt;记录自己遇到的奇奇怪怪的bug。&lt;/p&gt;

&lt;h2 id=&quot;升级反代后-groovy-脚本挂掉&quot;&gt;升级反代后 Groovy 脚本挂掉&lt;/h2&gt;

&lt;p&gt;这个问题对于我来说，难度在于问题的定位，因为问题本身很好解决。&lt;/p&gt;

&lt;p&gt;背景情况是这样的，我们一个服务的生产环境上，使用一个 Groovy (Grails 2.3.11) 脚本作为反代。前一天晚上进行更新以后，第二天起床发现微信端发送给这个脚本的请求都会返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;204 No Content&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;很奇怪吧。&lt;/p&gt;

&lt;p&gt;然而更奇怪的是，昨晚在上线以后，测试了一下是没问题的。（因为这次更新没有 break changes，只是给微信端的 Vue-router 的导航守卫优化了一下用户体验）&lt;/p&gt;

&lt;p&gt;然后这时候我的主要怀疑对象变成了学校的服务器。不过经过沟通以后，发现这种可能性并不大。&lt;/p&gt;

&lt;p&gt;不过另一条线索是，再跟网协的学长汇报过以后，发现有学长昨晚也进行了操作（后来发现是进行了反代的升级）。然后网页调试过后，发现是脚本那边的 JSON Parser 报错。然而后端接口完全没有异常，非常奇怪。&lt;/p&gt;

&lt;p&gt;就这样进行了很多次调试，中间的尝试过程就省略了。主要是因为搞不清楚是不是代码出了问题，或者是哪里出了问题。&lt;/p&gt;

&lt;p&gt;后来发现，在 JSON parser 背后最直接的报错是&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;URI
    /script_playground/api/
Class
    javax.net.ssl.SSLException
Message
    Received fatal alert: protocal_version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后结合之前的信息，才发现原来是反代升级之后，TLSv1.x 无法相互匹配了（Java 版本太老）。经过降级之后解决问题。&lt;/p&gt;

&lt;h2 id=&quot;pip-配置问题&quot;&gt;pip 配置问题&lt;/h2&gt;

&lt;p&gt;很长一段时间，我发现我无法使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;pip&lt;/code&gt; 安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;tensorflow&lt;/code&gt;,具体症状如下：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# python3.7&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ArchLinux&lt;/span&gt;

pip search tensorflow
&lt;span class=&quot;c&quot;&gt;# OK, 能出现 tensorflow&lt;/span&gt;

pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; tensorflow
&lt;span class=&quot;c&quot;&gt;# Could not find a version that satisfies the requirement tensorflow (from versions: none) No matching distribution found for tensorflow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后一直我是把这个锅甩给 tensorflow 与 pip 的，然后改从 AUR 装。&lt;/p&gt;

&lt;p&gt;后来 &lt;code class=&quot;highlighter-rouge&quot;&gt;19/10/xx&lt;/code&gt; 的时候，因为想试试 rasa。于是又开始解决这个问题。然后我想了想，我应该遇到的不是普遍情况。因为这么多使用者（尤其有很多非计算机专业的），要是 pip 无法安装，这可是个大新闻。&lt;/p&gt;

&lt;p&gt;然后我开始在网上搜索的旅程，显然搜到的都不是我想要的。&lt;/p&gt;

&lt;p&gt;后来我发现，如果直接使用 google 提供的软件包&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; https://xxxxxxx/xxxxxxx.whl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;是可以正常安装的。&lt;/p&gt;

&lt;p&gt;这让我更加一头雾水，直到我看到了&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip config &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# no-binary = :all:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;???&lt;/p&gt;

&lt;p&gt;黑人问号脸，这时候才恍然大悟。于是翻了下文档，把它修改为&lt;code class=&quot;highlighter-rouge&quot;&gt;:none:&lt;/code&gt;，问题就解决了。&lt;/p&gt;

&lt;p&gt;别问我，我也不知道为什么自己会有这个配置。&lt;/p&gt;

&lt;h2 id=&quot;ruby-多版本的冲突&quot;&gt;Ruby 多版本的冲突&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;时间2019/07/x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事情的起源大概是这样的，虽然我不会Ruby也不直接使用Ruby，但是Ruby是很多软件的依赖。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Travis-ci&lt;/li&gt;
  &lt;li&gt;lolcat&lt;/li&gt;
  &lt;li&gt;msf&lt;/li&gt;
  &lt;li&gt;tmuxinator&lt;/li&gt;
  &lt;li&gt;oh-my-zsh&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后按照提示，我在PATH中直接添加了Ruby的环境变量（不加的话，有时候会有warning）&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.rvm/bin&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:/home/my-hostname/.gem/ruby/2.6.0/bin&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然而某天开始，当我试图运行一些安装好的Ruby程序的时候就疯狂报错，内容类似于：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Can't find gem bundler (&amp;gt;= 0.a) with executable bundle (Gem::GemNotFoundException)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;没错跟&lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt;官方给出的&lt;a href=&quot;https://bundler.io/blog/2019/05/14/solutions-for-cant-find-gem-bundler-with-executable-bundle.html&quot;&gt;issue&lt;/a&gt;的解决方法很像。&lt;/p&gt;

&lt;p&gt;然而除此之外我还发现我的nvm装了好几个，而且一直使用的甚至不是2.x的Ruby，于是利用nvm卸载了较老的Ruby版本，删除了&lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH&lt;/code&gt;一些不需要的路径。&lt;/p&gt;

&lt;p&gt;最后就莫名其妙好了。Orz&lt;/p&gt;

&lt;h2 id=&quot;7个小时的debug之旅vue-cli无法启动&quot;&gt;7个小时的debug之旅——Vue-cli无法启动&lt;/h2&gt;

&lt;p&gt;这个问题是在寒假刚上手的&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue-cli&lt;/code&gt;的第一天遇到的，
现在开学了以后才想起来应该记录一下。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;遇到的问题很简单，就是在运行&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue-cli&lt;/code&gt;时候出现了一个很莫名奇妙的报错
（虽然知道要贴报错，但是想必没有人会再遇到了就不贴了）&lt;/p&gt;

&lt;h3 id=&quot;执行操作&quot;&gt;执行操作&lt;/h3&gt;

&lt;p&gt;按照教程上一步步来的&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yarn global add @vue/cli
vue ui &lt;span class=&quot;c&quot;&gt;# 出现报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;尝试解决&quot;&gt;尝试解决&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;google搜索&lt;/li&gt;
  &lt;li&gt;重装了vue&lt;/li&gt;
  &lt;li&gt;重装了yarn&lt;/li&gt;
  &lt;li&gt;使用npm&lt;/li&gt;
  &lt;li&gt;重装了npm&lt;/li&gt;
  &lt;li&gt;使用nvm新建nodejs环境&lt;/li&gt;
  &lt;li&gt;重复&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;分析&quot;&gt;分析&lt;/h3&gt;

&lt;p&gt;随着问题的一次次发生，我渐渐意识到了：&lt;/p&gt;

&lt;p&gt;这可能不是我能解决的问题，也许是来自底层的依赖&lt;/p&gt;

&lt;h3 id=&quot;结局&quot;&gt;结局&lt;/h3&gt;

&lt;p&gt;在下午五点时，终于在&lt;code class=&quot;highlighter-rouge&quot;&gt;stackoverflow&lt;/code&gt;一个关于&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;的提问中找到了问题，是来自于刚刚更新的一个底层依赖产生的问题，解决方法是强制使用原来的版本，遂解决。&lt;/p&gt;

&lt;h3 id=&quot;吸取的经验&quot;&gt;吸取的经验&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;有些问题不一定是我一个人可以解决的，在进行操作之前还要做出多种假设，并利用搜索引擎进行信息收集。（因为如果是底层依赖，搜索时候可以不加入&lt;code class=&quot;highlighter-rouge&quot;&gt;vue-cli&lt;/code&gt;关键字）&lt;/li&gt;
  &lt;li&gt;对于这种&lt;code class=&quot;highlighter-rouge&quot;&gt;'0day'&lt;/code&gt;的问题，使用google并不是一个非常完美的方法，因为新的问题或许没有加入索引之中，更好的解决方式是直接在专业论坛内进行搜索。&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;不要太执着23333&lt;/del&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但现在来说&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Vue-cli&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;vuetify&lt;/code&gt;+ &lt;code class=&quot;highlighter-rouge&quot;&gt;vuelidate&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Django&lt;/code&gt;+ &lt;code class=&quot;highlighter-rouge&quot;&gt;Django-rest-framework&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;gitlab-ci&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;
还是很爽的&lt;/p&gt;</content><author><name>FKYnJYQ</name></author><category term="linux" /><category term="debug" /><summary type="html">记录自己遇到的奇奇怪怪的bug。 升级反代后 Groovy 脚本挂掉 这个问题对于我来说，难度在于问题的定位，因为问题本身很好解决。 背景情况是这样的，我们一个服务的生产环境上，使用一个 Groovy (Grails 2.3.11) 脚本作为反代。前一天晚上进行更新以后，第二天起床发现微信端发送给这个脚本的请求都会返回 204 No Content。 很奇怪吧。 然而更奇怪的是，昨晚在上线以后，测试了一下是没问题的。（因为这次更新没有 break changes，只是给微信端的 Vue-router 的导航守卫优化了一下用户体验） 然后这时候我的主要怀疑对象变成了学校的服务器。不过经过沟通以后，发现这种可能性并不大。 不过另一条线索是，再跟网协的学长汇报过以后，发现有学长昨晚也进行了操作（后来发现是进行了反代的升级）。然后网页调试过后，发现是脚本那边的 JSON Parser 报错。然而后端接口完全没有异常，非常奇怪。 就这样进行了很多次调试，中间的尝试过程就省略了。主要是因为搞不清楚是不是代码出了问题，或者是哪里出了问题。 后来发现，在 JSON parser 背后最直接的报错是 URI /script_playground/api/ Class javax.net.ssl.SSLException Message Received fatal alert: protocal_version 然后结合之前的信息，才发现原来是反代升级之后，TLSv1.x 无法相互匹配了（Java 版本太老）。经过降级之后解决问题。 pip 配置问题 很长一段时间，我发现我无法使用 pip 安装 tensorflow,具体症状如下： # python3.7 # ArchLinux pip search tensorflow # OK, 能出现 tensorflow pip install --user tensorflow # Could not find a version that satisfies the requirement tensorflow (from versions: none) No matching distribution found for tensorflow 然后一直我是把这个锅甩给 tensorflow 与 pip 的，然后改从 AUR 装。 后来 19/10/xx 的时候，因为想试试 rasa。于是又开始解决这个问题。然后我想了想，我应该遇到的不是普遍情况。因为这么多使用者（尤其有很多非计算机专业的），要是 pip 无法安装，这可是个大新闻。 然后我开始在网上搜索的旅程，显然搜到的都不是我想要的。 后来我发现，如果直接使用 google 提供的软件包 pip install --user https://xxxxxxx/xxxxxxx.whl 是可以正常安装的。 这让我更加一头雾水，直到我看到了 pip config --list # ... # no-binary = :all: ??? 黑人问号脸，这时候才恍然大悟。于是翻了下文档，把它修改为:none:，问题就解决了。 别问我，我也不知道为什么自己会有这个配置。 Ruby 多版本的冲突 时间2019/07/x 事情的起源大概是这样的，虽然我不会Ruby也不直接使用Ruby，但是Ruby是很多软件的依赖。 Travis-ci lolcat msf tmuxinator oh-my-zsh 然后按照提示，我在PATH中直接添加了Ruby的环境变量（不加的话，有时候会有warning） export PATH=&quot;$PATH:$HOME/.rvm/bin&quot; export PATH=&quot;$PATH:/home/my-hostname/.gem/ruby/2.6.0/bin&quot; 然而某天开始，当我试图运行一些安装好的Ruby程序的时候就疯狂报错，内容类似于： Can't find gem bundler (&amp;gt;= 0.a) with executable bundle (Gem::GemNotFoundException) 没错跟bundler官方给出的issue的解决方法很像。 然而除此之外我还发现我的nvm装了好几个，而且一直使用的甚至不是2.x的Ruby，于是利用nvm卸载了较老的Ruby版本，删除了$PATH一些不需要的路径。 最后就莫名其妙好了。Orz 7个小时的debug之旅——Vue-cli无法启动 这个问题是在寒假刚上手的Vue-cli的第一天遇到的， 现在开学了以后才想起来应该记录一下。 遇到的问题很简单，就是在运行Vue-cli时候出现了一个很莫名奇妙的报错 （虽然知道要贴报错，但是想必没有人会再遇到了就不贴了） 执行操作 按照教程上一步步来的 yarn global add @vue/cli vue ui # 出现报错 尝试解决 google搜索 重装了vue 重装了yarn 使用npm 重装了npm 使用nvm新建nodejs环境 重复 分析 随着问题的一次次发生，我渐渐意识到了： 这可能不是我能解决的问题，也许是来自底层的依赖 结局 在下午五点时，终于在stackoverflow一个关于react的提问中找到了问题，是来自于刚刚更新的一个底层依赖产生的问题，解决方法是强制使用原来的版本，遂解决。 吸取的经验 有些问题不一定是我一个人可以解决的，在进行操作之前还要做出多种假设，并利用搜索引擎进行信息收集。（因为如果是底层依赖，搜索时候可以不加入vue-cli关键字） 对于这种'0day'的问题，使用google并不是一个非常完美的方法，因为新的问题或许没有加入索引之中，更好的解决方式是直接在专业论坛内进行搜索。 不要太执着23333 但现在来说 Vue-cli + vuetify+ vuelidate + Django+ Django-rest-framework + gitlab-ci + docker 还是很爽的</summary></entry><entry><title type="html">使用电脑的一些小技巧</title><link href="http://localhost:4000/computer/2019/05/01/computer_usage.html" rel="alternate" type="text/html" title="使用电脑的一些小技巧" /><published>2019-05-01T00:51:02+08:00</published><updated>2019-05-01T00:51:02+08:00</updated><id>http://localhost:4000/computer/2019/05/01/computer_usage</id><content type="html" xml:base="http://localhost:4000/computer/2019/05/01/computer_usage.html">&lt;p&gt;emmmm作为一名多年的电脑使用者，倒是总结了一些使用电脑的经验，想要总结一下。&lt;/p&gt;

&lt;h2 id=&quot;浏览器书签使用方式&quot;&gt;浏览器书签使用方式&lt;/h2&gt;

&lt;p&gt;Chrome里的书签大概已经有几千个了，管理起来一直是令人头疼的问题。
我一直以来的方式，是按照类别使用文件夹尽量细分，最多会友好几层文件嵌套，可时间长了，也会发现大问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有很多书签其实可以从多个角度去描述，无法单一分类&lt;/li&gt;
  &lt;li&gt;收藏的时候有事懒得细分&lt;/li&gt;
  &lt;li&gt;经常需要新建文件夹，比较麻烦&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以每次整理收藏夹都是一件令人崩溃的事情QAQ。&lt;/p&gt;

&lt;p&gt;后来想明白了，不应该细致分类，而应该&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于大部分收藏，仅用一层文件夹做大类的区分&lt;/li&gt;
  &lt;li&gt;对于以上的收藏，使用搜索进行查找（在地址栏输入即可）&lt;/li&gt;
  &lt;li&gt;对于少数重要的收藏，再按需要进行查找&lt;/li&gt;
  &lt;li&gt;比如某一个论文的文献查找，显然更需要集中在一起，这是使用老的方法即可&lt;/li&gt;
  &lt;li&gt;另外在收藏的时候，尽量在书签名多填写一些关键字，方便搜索&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外，按照个人的习惯&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由于有些网站只是想在没有历史记录情况下加快索引，这时候可以专门建立&lt;code class=&quot;highlighter-rouge&quot;&gt;网站&lt;/code&gt;文件夹，用于储藏索引。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样子能够比较方便地解决之前遇到的问题。
什么？你说你怕忘记了搜不到？那收藏也救不了你XD&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;电脑中文件的管理方式&quot;&gt;电脑中文件的管理方式&lt;/h2&gt;

&lt;p&gt;对于我来说，文件的管理其实与书签管理恰恰相反——要尽可能地增加文件夹的数量，来良好地将文件分类管理。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于不同类别的文件，尽可能使用文件夹将彼此隔离&lt;/li&gt;
  &lt;li&gt;约定大于配置，可以利用很多默认的文件夹、或者形成自己的配置习惯
    &lt;ul&gt;
      &lt;li&gt;比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;${HOME}/code/&amp;lt;language&amp;gt;/&lt;/code&gt; 存放不同语言的代码&lt;/li&gt;
      &lt;li&gt;比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;${HOME}/code/git/mine/&lt;/code&gt; 存放使用git的项目&lt;/li&gt;
      &lt;li&gt;比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;${HOME}/playground/&lt;/code&gt; 存放临时但是又不想放入 &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; 的文件&lt;/li&gt;
      &lt;li&gt;比如针对网盘专门建立相应的文件夹&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;利用好 &lt;code class=&quot;highlighter-rouge&quot;&gt;aliases&lt;/code&gt; 方便快速切换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后就是一定要定期清理冗余的文件，并且进行备份，并且一定要舍得 &lt;em&gt;下狠手&lt;/em&gt; XD。&lt;/p&gt;</content><author><name>FKYnJYQ</name></author><category term="tips" /><category term="browser" /><summary type="html">emmmm作为一名多年的电脑使用者，倒是总结了一些使用电脑的经验，想要总结一下。 浏览器书签使用方式 Chrome里的书签大概已经有几千个了，管理起来一直是令人头疼的问题。 我一直以来的方式，是按照类别使用文件夹尽量细分，最多会友好几层文件嵌套，可时间长了，也会发现大问题。 有很多书签其实可以从多个角度去描述，无法单一分类 收藏的时候有事懒得细分 经常需要新建文件夹，比较麻烦 所以每次整理收藏夹都是一件令人崩溃的事情QAQ。 后来想明白了，不应该细致分类，而应该 对于大部分收藏，仅用一层文件夹做大类的区分 对于以上的收藏，使用搜索进行查找（在地址栏输入即可） 对于少数重要的收藏，再按需要进行查找 比如某一个论文的文献查找，显然更需要集中在一起，这是使用老的方法即可 另外在收藏的时候，尽量在书签名多填写一些关键字，方便搜索 另外，按照个人的习惯 由于有些网站只是想在没有历史记录情况下加快索引，这时候可以专门建立网站文件夹，用于储藏索引。 这样子能够比较方便地解决之前遇到的问题。 什么？你说你怕忘记了搜不到？那收藏也救不了你XD 电脑中文件的管理方式 对于我来说，文件的管理其实与书签管理恰恰相反——要尽可能地增加文件夹的数量，来良好地将文件分类管理。 对于不同类别的文件，尽可能使用文件夹将彼此隔离 约定大于配置，可以利用很多默认的文件夹、或者形成自己的配置习惯 比如 ${HOME}/code/&amp;lt;language&amp;gt;/ 存放不同语言的代码 比如 ${HOME}/code/git/mine/ 存放使用git的项目 比如 ${HOME}/playground/ 存放临时但是又不想放入 /tmp 的文件 比如针对网盘专门建立相应的文件夹 利用好 aliases 方便快速切换 最后就是一定要定期清理冗余的文件，并且进行备份，并且一定要舍得 下狠手 XD。</summary></entry><entry><title type="html">创建你的第一个Grails应用（中文翻译）</title><link href="http://localhost:4000/backend/2019/03/23/creating_your_first_grails_application.html" rel="alternate" type="text/html" title="创建你的第一个Grails应用（中文翻译）" /><published>2019-03-23T00:41:04+08:00</published><updated>2019-03-23T00:41:04+08:00</updated><id>http://localhost:4000/backend/2019/03/23/creating_your_first_grails_application</id><content type="html" xml:base="http://localhost:4000/backend/2019/03/23/creating_your_first_grails_application.html">&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;汉化：完成&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;校对文字：C9&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;添加链接：C9&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;&lt;del&gt;Windows/Mac 兼容&lt;/del&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;增加code中文件名&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;专有名词修订&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;修正错误&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;
    &lt;p&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; checked=&quot;checked&quot; /&gt;整理编号&lt;/p&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt; 配置？&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt; 控制器&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt; 域&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt; 域类&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt; 模型&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt; 视图&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scaffold&lt;/code&gt; 脚手架&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;transaction&lt;/code&gt; 事物&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt; 方法
    &lt;ul&gt;
      &lt;li&gt;一般针对设计模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt; 方法
    &lt;ul&gt;
      &lt;li&gt;一般针对函数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;content negotiation&lt;/code&gt; 内容协商&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt; 布局&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 渲染&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意一下，作者有时展示了完成一个功能的多种方法，所以强烈建议你在看完每一小段的教程之后再亲自动手。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Zachary Klein&lt;/code&gt;的&lt;a href=&quot;http://guides.grails.org/creating-your-first-grails-app/guide/#training&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Creating your first Grails Application&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;学习如何创建一个Grails应用，从无到有。&lt;/p&gt;

&lt;p&gt;Version：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails -v
| Grails Version: 3.3.8
| Groovy Version: 2.4.15
| JVM Version: 1.8.0_202
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;1-让我们开始&quot;&gt;1 让我们开始&lt;/h2&gt;

&lt;p&gt;在这篇文章中，你将要从无到有创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;应用程序。你将会学习有关&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Services&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GSP&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;单元、集成测试&lt;/code&gt;等相关知识。这篇文章是为了那些第一次接触&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;框架的人而撰写的。&lt;/p&gt;

&lt;h3 id=&quot;11-你需要什么&quot;&gt;1.1 你需要什么&lt;/h3&gt;

&lt;p&gt;为了完成这篇文章，你需要。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一些时间&lt;/li&gt;
  &lt;li&gt;一个可用的编辑器或IDE（这里首推ULTIMATE版IDEA）&lt;/li&gt;
  &lt;li&gt;配置了环境变量的JDK1.8&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;12-如何完成这篇教程&quot;&gt;1.2 如何完成这篇教程&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;这部分讲述了原作者建立的项目应该如何使用，但是在翻译的时候已经不太适用，所以此处的翻译略去，有兴趣的话可以访问&lt;a href=&quot;http://guides.grails.org/creating-your-first-grails-app/guide/#training&quot;&gt;原链接&lt;/a&gt;查看。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配置Grails&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone 项目&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原教程项目文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/grails-guides/creating-your-first-grails-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个教程的项目有两个主要文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initial&lt;/code&gt; 存放初始项目&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;complete&lt;/code&gt; 存放完整版项目
&lt;!-- // TODO --&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-创建grails项目&quot;&gt;2 创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;项目&lt;/h2&gt;

&lt;p&gt;正如以前提到过，创建新项目不能够再简单了。&lt;/p&gt;

&lt;p&gt;只需运行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails create-app myApp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意到我们并没有指定具体的&lt;code class=&quot;highlighter-rouge&quot;&gt;包名&lt;/code&gt;（package），这时&lt;code class=&quot;highlighter-rouge&quot;&gt;package&lt;/code&gt;会默认使用当前&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;名称（e.g.,myapp）。&lt;/p&gt;

&lt;p&gt;你也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/conf/application.yml&lt;/code&gt;中修改这个参数。&lt;/p&gt;

&lt;p&gt;或者在创建的时候使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails create-app org.grails.guides.myApp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;21-安装grails&quot;&gt;2.1 安装Grails&lt;/h3&gt;

&lt;p&gt;由于此处的方法极多，请自行搜索教程。&lt;/p&gt;

&lt;h3 id=&quot;22-grails-application-forge&quot;&gt;2.2 Grails Application Forge&lt;/h3&gt;

&lt;p&gt;超出本教程要求，因此不做翻译。&lt;/p&gt;

&lt;p&gt;Did you know you can download a complete Grails project without installing any additional tools? Go to &lt;a href=&quot;http://start.grails.org/&quot;&gt;start.grails.org&lt;/a&gt; and use the Grails Application Forge to generate your Grails project. You can choose your project type (Application or Plugin), pick a version of Grails, and choose a Profile - then click “Generate Project” to download a ZIP file. No Grails installation necessary!&lt;/p&gt;

&lt;p&gt;You can even download your project from the command line using a HTTP tool like curl (see &lt;a href=&quot;http://start.grails.org/&quot;&gt;start.grails.org&lt;/a&gt; for API documentation):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;curl -O start.grails.org/myapp.zip -d version=3.2.4 -d profile=angular
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;23-应用配置application-profile&quot;&gt;2.3 应用配置（Application Profile）&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;注意这部分内容你并不需要亲自动手操作，只需先了解即可，因为本教程不涉及profile的内容&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;您可以选择为&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;应用指定&lt;a href=&quot;http://docs.grails.org/latest/guide/profiles.html&quot;&gt;profile&lt;/a&gt;配置文件。配置文件适用于许多常见的应用程序类型，包括&lt;code class=&quot;highlighter-rouge&quot;&gt;rest-api&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;angular&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;react&lt;/code&gt;等，您甚至可以创建自己的应用程序。&lt;/p&gt;

&lt;p&gt;要查看可用配置文件的列表，请使用&lt;a href=&quot;http://docs.grails.org/latest/ref/Command%20Line/list-profiles.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list-profiles&lt;/code&gt;&lt;/a&gt;命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ grails list-profiles

| Available Profiles
--------------------
* angular - A profile for creating applications using AngularJS
* rest-api - Profile for REST API applications
* base - The base profile extended by other profiles
* angular2 - A profile for creating Grails applications with Angular 2
* plugin - Profile for plugins designed to work across all profiles
* profile - A profile for creating new Grails profiles
* react - A profile for creating Grails applications with a React frontend
* rest-api-plugin - Profile for REST API plugins
* web - Profile for Web applications
* web-plugin - Profile for Plugins designed for Web applications
* webpack - A profile for creating applications with node-based frontends using webpack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要使用配置文件，请在其前面加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-profile&lt;/code&gt;标志指定其名称：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails create-app myApp -profile rest-api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;您可以选择指定包和版本（默认为&lt;code class=&quot;highlighter-rouge&quot;&gt;org.grails.profiles&lt;/code&gt;和配置文件的当前版本）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails create-app myApp -profile org.grails.profiles:react:1.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要获取有关配置文件的详细信息，请使用&lt;a href=&quot;http://docs.grails.org/latest/ref/Command%20Line/profile-info.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;profile-info&lt;/code&gt;&lt;/a&gt;命令。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ grails profile-info plugin

Profile: plugin
--------------------
Profile for plugins designed to work across all profiles

Provided Commands:
--------------------
| Error Error occurred loading commands: grails.dev.commands.ApplicationContextCommandRegistry (Use --stacktrace to see the full trace)
| Error Error occurred loading commands: grails.dev.commands.ApplicationContextCommandRegistry (Use --stacktrace to see the full trace)
* package-plugin - Packages the plugin into a JAR file
* publish-plugin - Publishes the plugin to the Grails central repository
* help - Prints help information for a specific command
* open - Opens a file in the project
* gradle - Allows running of Gradle tasks
* clean - Cleans a Grails application's compiled sources
* compile - Compiles a Grails application
* create-command - Creates an Application Command
* create-domain-class - Creates a Domain Class
* create-service - Creates a Service
* create-unit-test - Creates a unit test
* install - Installs a Grails application or plugin into the local Maven cache
* assemble - Creates a JAR or WAR archive for production deployment
* bug-report - Creates a zip file that can be attached to issue reports for the current project
* console - Runs the Grails interactive console
* create-script - Creates a Grails script
* dependency-report - Prints out the Grails application's dependencies
* list-plugins - Lists available plugins from the Plugin Repository
* plugin-info - Prints information about the given plugin
* run-app - Runs a Grails application
* run-command - Executes Grails commands
* run-script - Executes Groovy scripts in a Grails context
* shell - Runs the Grails interactive shell
* stats - Prints statistics about the project
* stop-app - Stops the running Grails application
* test-app - Runs the applications tests

Provided Features:
--------------------
* asset-pipeline - Adds Asset Pipeline to a Grails project
* hibernate4 - Adds GORM for Hibernate 4 to the project
* hibernate5 - Adds GORM for Hibernate 5 to the project
* json-views - Adds support for JSON Views to the project
* less-asset-pipeline - Adds LESS Transpiler Asset Pipeline to a Grails project
* markup-views - Adds support for Markup Views to the project
* mongodb - Adds GORM for MongoDB to the project
* neo4j - Adds GORM for Neo4j to the project
* rx-mongodb - Adds RxGORM for MongoDB to the project
* asset-pipeline-plugin - Adds Asset Pipeline to a Grails Plugin for packaging
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;在创建不带-profile的应用程序时，使用的默认配置文件是Web配置文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-运行项目&quot;&gt;3 运行项目&lt;/h2&gt;

&lt;p&gt;既然你已经创建了这个项目，我们不妨去尝试运行一下看看效果怎么样，看看有什么东西是&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;已经为我们提供好了的。&lt;/p&gt;

&lt;h3 id=&quot;31-利用不同方式启动&quot;&gt;3.1 利用不同方式启动&lt;/h3&gt;

&lt;h4 id=&quot;311-利用grails命令运行&quot;&gt;3.1.1 利用&lt;code class=&quot;highlighter-rouge&quot;&gt;grails&lt;/code&gt;命令运行&lt;/h4&gt;

&lt;p&gt;你可以用&lt;a href=&quot;http://docs.grails.org/latest/ref/Command%20Line/run-app.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;run-app&lt;/code&gt;&lt;/a&gt;命令来运行一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;项目。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;grails run-app
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;312-利用grails-wrapper命令运行&quot;&gt;3.1.2 利用&lt;code class=&quot;highlighter-rouge&quot;&gt;grails wrapper&lt;/code&gt;命令运行&lt;/h4&gt;

&lt;p&gt;在[&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails Wrapper)&lt;/code&gt;](http://docs.grails.org/latest/guide/introduction.html#whatsNewGrailsWrapper的帮助下，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails 3.2.3&lt;/code&gt;以后的版本中，你也可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;不安装Grails&lt;/code&gt;的情况下运行项目。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;./grailsw run-app # 使用wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;313-利用交互模式运行&quot;&gt;3.1.3 利用交互模式运行&lt;/h4&gt;

&lt;p&gt;你还可以利用&lt;a href=&quot;http://docs.grails.org/latest/guide/commandLine.html#interactiveMode&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails interactive mode&lt;/code&gt;&lt;/a&gt;来运行一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails runtime&lt;/code&gt;，你可以在交互模式中使用任何命令，而无需等待运行时为每个任务启动。&lt;/p&gt;

&lt;p&gt;在本指南中，我们将更喜欢使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails wrapper&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw

| Enter a command name to run. Use TAB for completion:
grails&amp;gt;run-app      //you can shutdown the app with the stop-app command
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;314-使用gradle运行&quot;&gt;3.1.4 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;运行&lt;/h4&gt;

&lt;p&gt;最后，由于&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;是基于&lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://gradle.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;&lt;/a&gt;构建的，你可以使用Spring Boot的命令来与你的&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;项目交互，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;bootRun&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这些命令可用作Gradle任务。就像Grails本身一样，你无需在机器上安装Gradle。使用Gradle Wrapper（gradlew）时会自动下载&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;./gradlew bootRun
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行上述任何命令后，Grails将使用嵌入式Tomcat服务器启动你的应用程序，并使其（默认情况下）可从&lt;a href=&quot;http：//localhost：8080&quot;&gt;http://localhost:8080&lt;/a&gt;访问。&lt;/p&gt;

&lt;h3 id=&quot;32-修改端口&quot;&gt;3.2 修改端口&lt;/h3&gt;

&lt;p&gt;如果你想修改监听的端口，只需在之前提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;中加入&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# grails-app/conf/application.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8090&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一也可以在运行时直接指明端口。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;./grailsw run-app --port=8090
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;33-热更新&quot;&gt;3.3 热更新&lt;/h3&gt;

&lt;p&gt;现在的应用首页渲染的是含有应用相关信息的默认页面。这个默认页面位于&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/index.gsp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你可以尝试这查看并修改这个页面，比如&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Line 54 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row colset-2-its&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to My Frist Grails Project&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 尝试修改h1标签中的文本 --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存你的修改，并且刷新浏览器中的页面。你将会立刻看到最新的修改已经被渲染到页面上了。&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;会&lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;controllers&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;domain classes&lt;/code&gt;以及其他的资源更新以后&lt;code class=&quot;highlighter-rouge&quot;&gt;auto-reload&lt;/code&gt;，所以你不必刻意重启服务器。&lt;/p&gt;

&lt;!-- Warning --&gt;
&lt;p&gt;有一大部分对于&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;的操作，比如重命名、修改关系等对应用&lt;code class=&quot;highlighter-rouge&quot;&gt;Wiring&lt;/code&gt;的操作可能无法被&lt;code class=&quot;highlighter-rouge&quot;&gt;auto-reload&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;4-domain-classes&quot;&gt;4 Domain Classes&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;是一个基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring Boot&lt;/code&gt;的，采用&lt;a href=&quot;https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;&lt;/a&gt;架构的框架。典型的&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;架构的应用讲整个&lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt;划分为三个子项目。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt; 定义和管理数据的代码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; 管理代码如何呈现（如HTML）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt; 负责解决应用内部的逻辑，并且负责连接&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;负责对请求做出响应，从&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;中获取数据，并把它以特定的逻辑传给&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常，面向对象的MVC框架要求开发人员配置哪些类对应于上述三个类别中的每一个。然而，Grails比大多数框架更进一步遵循“&lt;a href=&quot;https://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;约定优于配置&lt;/code&gt;&lt;/a&gt;”的开发方法。这意味着对于Grails中的许多&lt;code class=&quot;highlighter-rouge&quot;&gt;Artefact&lt;/code&gt;类型（&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;等），你只需在项目的特定目录中创建一个文件，Grails将自动将其连接到你的应用程序中，而无需你进行任何其他配置。&lt;/p&gt;

&lt;p&gt;处理&lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt;到数据库表（以及其他持久存储）的映射是&lt;a href=&quot;http://gorm.grails.org/latest/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GORM&lt;/code&gt;&lt;/a&gt;（&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails Object Relational Mapper&lt;/code&gt;Grails对象关系映射器）的工作。 &lt;code class=&quot;highlighter-rouge&quot;&gt;GORM&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;框架中的一个强大工具，甚至可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;项目之外独立使用。它支持关系数据库（通过Hibernate）以及&lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDb&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Neo4j&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Redis&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Cassandra&lt;/code&gt;数据源。有关更多信息，请参阅&lt;a href=&quot;http://gorm.grails.org/latest/hibernate/manual/index.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GORM&lt;/code&gt;文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当你构建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;应用时，一般来说你要先从&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt;入手——也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;domain model&lt;/code&gt;。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;中，你的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt;将在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/domain&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;的类定义。&lt;/p&gt;

&lt;p&gt;所以我们不妨先从&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain&lt;/code&gt;入手。&lt;/p&gt;

&lt;h3 id=&quot;41-构建domain-class&quot;&gt;4.1 构建&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain Class&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain class&lt;/code&gt;可以由&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;生成（在这种情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;将自动创建单元测试），或者你可以自己创建文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;./grailsw create-domain-class Vehicle

| Created grails-app/domain/org/grails/guides/Vehicle.groovy
| Created src/test/groovy/org/grails/guides/VehicleSpec.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这将生成两个Groovy文件，一个是我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain class&lt;/code&gt;，另一个是单元测试。让我们看看我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain class&lt;/code&gt;是什么样的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Groovy&quot;&gt;// grails-app/domain/org/grails/guides/Vehicle.groovy

package org.grails.guides

class Vehicle {

    static constraints = {
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;没有属性，也没有约束。这不是很有趣，但值得注意的是，这就是在我们的应用程序中连接&lt;code class=&quot;highlighter-rouge&quot;&gt;persistent domain class&lt;/code&gt;所需的全部内容。默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;Hibernate&lt;/code&gt;将用于配置数据源（默认情况下为内存中的H2数据库），并为&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/domain&lt;/code&gt;下的所有Groovy类创建表和关联。让我们为这个&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;添加一些属性：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/domain/org/grails/guides/Vehicle.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// #1&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// #2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;maxSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;inList:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Ford'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Chevrolet'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nissan'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;nullable:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;属性将用于在数据库中创建列（假设使用关系数据库）&lt;/li&gt;
  &lt;li&gt;约束用于在每个字段中强制执行有效数据 - Grails为常见场景提供了一组丰富的约束，你还可以定义自定义约束&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有关如何使用&lt;a href=&quot;https://docs.grails.org/latest/ref/Domain%20Classes/Usage.html&quot;&gt;域类&lt;/a&gt;和&lt;a href=&quot;https://docs.grails.org/latest/ref/Constraints/Usage.html&quot;&gt;约束&lt;/a&gt;的内容，请参阅Grails文档&lt;/p&gt;

&lt;h3 id=&quot;42-db-console&quot;&gt;4.2 DB Console&lt;/h3&gt;

&lt;p&gt;如果你再次运行该应用程序(&lt;em&gt;注意一定要重新启动你的app&lt;/em&gt;)，你应该看到与以前相同的页面。但是，你可以登录到数据库控制台并查看新的数据库表。&lt;/p&gt;

&lt;p&gt;浏览到(http://localhost:8080/dbconsole)[http://localhost:8080/dbconsole]并登录。默认用户名是sa，没有密码。默认的JDBC URL是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;/grails-app/conf/application.yml&lt;/code&gt;中查看JDBC url&lt;/p&gt;

&lt;p&gt;登录到数据库控制台后，你应该会在左侧边栏中看到新的VEHICLES表。单击+图标展开表格 - 你应该看到列的列表，包括我们刚刚定义的三个字符串字段，名称，品牌和型号。&lt;/p&gt;

&lt;h3 id=&quot;43-扩展domain-model&quot;&gt;4.3 扩展&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain Model&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;相比你也能注意到，对于我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt;来说，它的&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;字段目前还是&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型——这是很不合理的。因为&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;都应该是相互关联的。（正如关系型数据库一样）所以让我们把&lt;code class=&quot;highlighter-rouge&quot;&gt;Domain model&lt;/code&gt;扩展一下，变得更&lt;code class=&quot;highlighter-rouge&quot;&gt;robust&lt;/code&gt;吧。&lt;/p&gt;

&lt;p&gt;创建一下两个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain classes&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw create-domain-class Make

| Created grails-app/domain/org/grails/guides/Make.groovy
| Created src/test/groovy/org/grails/guides/Make.groovy

$ ./grailsw create-domain-class Model

| Created grails-app/domain/org/grails/guides/Model.groovy
| Created src/test/groovy/org/grails/guides/Model.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;讲下列两个文件编辑为如下内容：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/domain/org/grails/guides/Make.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/domain/org/grails/guides/Model.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;belongsTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;belongsTo&lt;/code&gt;属性是GORM用于确定域类之间关联的几个属性之一。其他包括&lt;code class=&quot;highlighter-rouge&quot;&gt;hasMany&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;hasOne&lt;/code&gt;。有关更多信息，请参阅&lt;a href=&quot;http://gorm.grails.org/6.0.x/hibernate/manual/#gormAssociation&quot;&gt;GORM文档&lt;/a&gt;。
你可以回想一下实体之间的关系（1:n,1:1,n:m）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在，更新&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle.groovy&lt;/code&gt;以使用新的&lt;code class=&quot;highlighter-rouge&quot;&gt;Make&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;类来代替原来的&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/domain/org/grails/guides/Vehicle.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GrailsDomainReservedSqlKeywordName'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;min:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;maxSize:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;（通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GORM&lt;/code&gt;）现在将在我们的数据库中为我们的三个&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;创建三个表，并在表之间创建必要的关联。&lt;/p&gt;

&lt;p&gt;再次运行应用程序(重启)并打开数据库控制台以查看新表。&lt;/p&gt;

&lt;h3 id=&quot;44-bootstrapping-data-初始化数据&quot;&gt;4.4 Bootstrapping Data (初始化数据)&lt;/h3&gt;

&lt;p&gt;每个&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;项目都包含&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/init&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;BootStrap.groovy&lt;/code&gt;文件。此文件可用于你希望在应用程序启动期间发生的任何自定义逻辑。该文件的一个很好的用途是在我们的数据库中预加载一些数据。让我们创建三个域类的几个实例。&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/init/org/grails/guides/BootStrap.groovy&lt;/code&gt;，如下文所示：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/init/org/grails/guides/BootStrap.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BootStrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servletContext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Nissan'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ford&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ford'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Titan'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Leaf'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windstar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Windstar'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ford&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Pickup'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Economy'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Minivan'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ford&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windstar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1990&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在重新启动应用程序，并浏览&lt;code class=&quot;highlighter-rouge&quot;&gt;DBConsole&lt;/code&gt;，你应该能够展开这三个表并查看我们新创建的数据。&lt;/p&gt;

&lt;h3 id=&quot;45-数据源datasources&quot;&gt;4.5 数据源（Datasources）&lt;/h3&gt;

&lt;p&gt;默认情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;配置&lt;code class=&quot;highlighter-rouge&quot;&gt;in-memory&lt;/code&gt;内存中的&lt;code class=&quot;highlighter-rouge&quot;&gt;H2数据库&lt;/code&gt;，&lt;strong&gt;每次重新启动应用程序时都会删除并重新创建&lt;/strong&gt;。这对于本指南中的目的是足够的，但是，你可以通过配置自己的数据源轻松地将其更改为本地数据库实例。我们将以&lt;code class=&quot;highlighter-rouge&quot;&gt;MySQL&lt;/code&gt;为例。&lt;/p&gt;

&lt;h3 id=&quot;46-配置mysql数据源&quot;&gt;4.6 配置MySQL数据源&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;前提是你有MySQL数据库，不然译者比较建议你跳过这一段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// build.gradle&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;runtime&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mysql:mysql-connector-java:5.1.40'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;添加MySQL JDBC驱动程序作为依赖项&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;确保将依赖项添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt;部分，而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;buildscript/dependencies&lt;/code&gt;部分。前者用于&lt;em&gt;应用程序依赖项&lt;/em&gt;（在编译时，运行时或测试时需要），而&lt;em&gt;构建脚本依赖项&lt;/em&gt;是作为&lt;code class=&quot;highlighter-rouge&quot;&gt;Gradle&lt;/code&gt;构建过程（例如，管理静态资产）的一部分所需的那些依赖项。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# grails-app/conf/application.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pooled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jmxExport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;driverClassName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;com.mysql.jdbc.Driver&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dialect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sa&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;testing&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;environments&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;dbCreate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;update&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jdbc:mysql://127.0.0.1:3306/myapp&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 2.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;将driverClassName和dialect更改为MySQL设置&lt;/li&gt;
  &lt;li&gt;这假设你有一个名为myapp的数据库的本地MySQL实例&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;47-grails-console&quot;&gt;4.7 Grails Console&lt;/h3&gt;

&lt;p&gt;现在我们没有设置任何控制器或&lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;来使用我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;。我们很快就会到达那一步，但是现在，让我们启动&lt;a href=&quot;http://docs.grails.org/latest/ref/Command%20Line/console.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails console&lt;/code&gt;&lt;/a&gt;，以便我们可以探索&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;GORM&lt;/code&gt;提供的内容。&lt;/p&gt;

&lt;p&gt;如果应用程序仍在运行，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[Ctrl + C]&lt;/code&gt;或（如果在&lt;a href=&quot;http://docs.grails.org/latest/guide/commandLine.html#interactiveMode&quot;&gt;交互模式&lt;/a&gt;下运行&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails stop-app&lt;/code&gt;命令）将其关闭。&lt;/p&gt;

&lt;p&gt;启动Grails控制台：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./grailsw console
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Grails控制台应用程序将会启动。这个应用程序基于&lt;a href=&quot;http://groovy-lang.org/groovyconsole.html&quot;&gt;Groovy控制台&lt;/a&gt;，但具有额外的好处，即我们的整个Grails应用程序在后台启动并运行，因此我们可以访问我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain&lt;/code&gt;，甚至可以从控制台持久保存到数据库。&lt;/p&gt;

&lt;p&gt;尝试从控制台使用我们的新&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;。这是一个简单的脚本，可以帮助你入门——再次参考&lt;a href=&quot;http://gorm.grails.org/6.0.x/hibernate/manual&quot;&gt;GORM文档&lt;/a&gt;，了解有关查询，持久性，配置等的更多详细信息。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// docs/console.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides.*&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Pickup&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Nissan&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissans&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAllByMake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nissan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nissans&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-controller&quot;&gt;5 Controller&lt;/h2&gt;

&lt;p&gt;本节将重点介绍创建&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;和定义操作的基础知识。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;虽然不是“MVC”三角形的一部分，但&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;也提供对&lt;a href=&quot;http://docs.grails.org/latest/guide/single.html#services&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;&lt;/a&gt;的支持。在任何复杂的&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;应用程序中，将核心应用程序逻辑保留在&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;中被认为是最佳实践。我们稍后将在本指南中介绍它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;遵循约定优于配置原则，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;将在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/controllers/&lt;/code&gt;下将任何&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy类&lt;/code&gt;配置为控制器，无需任何其他配置。你可以自己创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy类&lt;/code&gt;，或使用&lt;code class=&quot;highlighter-rouge&quot;&gt;create-controller&lt;/code&gt;命令生成控制器和相关的测试规范（test spec）。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw create-controller org.grails.guides.Home

| Created grails-app/controllers/org/grails/guides/HomeController.groovy
| Created src/test/groovy/org/grails/guides/HomeControllerSpec.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;请注意，Grails会自动添加*Controller后缀。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们来看看我们的新的&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Groovy&quot;&gt;// grails-app/controllers/org/grails/guides/HomeController.groovy

package org.grails.guides

class HomeController {

    def index() { }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;创建了一个具有单个&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;的控制器。&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;是控制器中的公共方法，可以响应请求。&lt;/p&gt;

&lt;p&gt;通常，控制器动作将接收请求，获得一些数据（可选地使用参数或请求的主体，如果存在），并将结果呈现给浏览器（例如，作为网页）。&lt;/p&gt;

&lt;p&gt;控制器操作还可以重定向请求，转发，调用服务方法以及返回HTTP响应代码。有关控制器操作的更多信息，请&lt;a href=&quot;http://docs.grails.org/latest/guide/theWebLayer.html#understandingControllersAndActions&quot;&gt;参阅Grails文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我们尚未对此&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;中的逻辑有任何需求，但我们希望它能够呈现页面。我们将在&lt;a href=&quot;http://guides.grails.org/creating-your-first-grails-app/guide/#Views&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;view&lt;/code&gt;&lt;/a&gt;部分中更详细地查看&lt;code class=&quot;highlighter-rouge&quot;&gt;GSP&lt;/code&gt;页面，但是现在，让我们为要显示的&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.index&lt;/code&gt;操作创建一个非常简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;GSP&lt;/code&gt;页面。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/home&lt;/code&gt;目录下创建文件&lt;code class=&quot;highlighter-rouge&quot;&gt;index.gsp&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row colset-2-its&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to our Home Page!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次运行该应用程序并浏览到&lt;code class=&quot;highlighter-rouge&quot;&gt;http:localhost:8080/home&lt;/code&gt;。你应该看到你的新页面。&lt;/p&gt;

&lt;p&gt;按照惯例，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;会将控制器操作映射到&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/[controllername]&lt;/code&gt;目录中&lt;strong&gt;具有相同名称的视图&lt;/strong&gt;。你可以覆盖它并指定特定视图（或完全呈现不同的内容）。&lt;/p&gt;

&lt;p&gt;我们将在下一节中更详细地介绍视图和&lt;code class=&quot;highlighter-rouge&quot;&gt;GSP&lt;/code&gt;，但是现在，你应该注意我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;index.gsp&lt;/code&gt;文件&lt;em&gt;基本上是一个HTML页面&lt;/em&gt;，带有几个不常见的标记。你可以根据需要随意修改这个新的主页。&lt;/p&gt;

&lt;h3 id=&quot;51-url-mappings-映射&quot;&gt;5.1 URL Mappings （映射）&lt;/h3&gt;

&lt;p&gt;现在我们有了新的“主页”页面，如果它是应用程序的登录页面而不是Grails默认页面会很好。为此，我们需要更改我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;UrlMappings.groovy&lt;/code&gt;文件。&lt;/p&gt;

&lt;p&gt;Grails使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UrlMappings.groovy&lt;/code&gt;文件&lt;em&gt;将请求路由到适当的&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;&lt;/em&gt;。它们可以像重定向到&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;和/或&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;的URI字符串一样简单，也可以包含通配符和约束，并且变得非常复杂。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从&lt;a href=&quot;http://docs.grails.org/latest/guide/theWebLayer.html#urlmappings&quot;&gt;Grails文档&lt;/a&gt;中了解有关URL映射的更多信息&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们来看看默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;URLMappings.groovy&lt;/code&gt;文件。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/UrlMappings.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;/$controller/$action?/$id?(.$format)?&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// apply constraints here&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2.&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;500&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/error'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;404&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/notFound'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Grails默认URL映射-此规则使请求根据名称映射到&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;和操作（以及可选的ID和/或格式）。所以&lt;code class=&quot;highlighter-rouge&quot;&gt;home/index&lt;/code&gt;将映射到&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;，名为&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;此URL映射将根URI（/）指向特定视图。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;让我们改变&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;规则指向我们的新&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;。编辑该行如下：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/UrlMappings.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UrlMappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;

        &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;controller:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;home&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Change view: “/index” to controller: “home”&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;按照惯例，对&lt;em&gt;没有操作名称的&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;的请求将转到索引操作&lt;/em&gt;（如果存在）（如果不存在，将抛出错误）。如果需要，可以通过在&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;中指定&lt;code class=&quot;highlighter-rouge&quot;&gt;defaultAction&lt;/code&gt;属性来更改此行为：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/HomeController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;homePage&quot;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;homePage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;不要进行此更改，这仅用于演示目的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在你已将&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;规则更改为指向新的&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;，如果你将应用程序和浏览器重新启动到&lt;a href=&quot;http://localhost:8080/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080&lt;/code&gt;&lt;/a&gt;，则应显示新的主页。&lt;/p&gt;

&lt;h3 id=&quot;52-scaffolding-脚手架&quot;&gt;5.2 Scaffolding （脚手架）&lt;/h3&gt;

&lt;p&gt;我们希望有一些操作允许我们创建新的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;实例并将它们保存到数据库中。此外，我们希望能够编辑现有实例甚至删除它们。通常所有这些功能都需要大量编码，但Grails为我们提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;scaffolding&lt;/code&gt;的来快速生成这些重复的代码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在&lt;a href=&quot;http://docs.grails.org/latest/guide/scaffolding.html&quot;&gt;Grails文档&lt;/a&gt;中了解有关脚手架的更多信息。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;53-dynamic-scaffolding-动态脚手架&quot;&gt;5.3 Dynamic Scaffolding (动态脚手架)&lt;/h3&gt;

&lt;p&gt;现在我们有了一个主页，让我们创建控制器来管理我们之前创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;。为每个&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;（Vehicle，Make和Model）创建3个新控制器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw create-controller Vehicle

| Created grails-app/controllers/org/grails/guides/VehicleController.groovy
| Created src/test/groovy/org/grails/guides/VehicleControllerSpec.groovy

$ ./grailsw create-controller Make

| Created grails-app/controllers/org/grails/guides/MakeController.groovy
| Created src/test/groovy/org/grails/guides/MakeControllerSpec.groovy

$ ./grailsw create-controller Model

| Created grails-app/controllers/org/grails/guides/ModelController.groovy
| Created src/test/groovy/org/grails/guides/ModelControllerSpec.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要使用scaffolding，请编辑我们刚刚创建的三个控制器，并&lt;em&gt;使用scaffolding属性替换默认索引操作&lt;/em&gt;，如下面的示例所示。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/VehicleController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VehicleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaffold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/MakeControler.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MakeControler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaffold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/ModelController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaffold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过设置&lt;code class=&quot;highlighter-rouge&quot;&gt;scaffold属性&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;现在将为各个域类生成所有必需的&lt;code class=&quot;highlighter-rouge&quot;&gt;CRUD（创建，读取，更新，删除）操作&lt;/code&gt;。它还将使用我们的域属性和关联(domain properties and associations)动态生成包含列表，创建，显示和编辑页面的视图。在一开始搭建应用程序时，这可以为你提供一个极大的便利。&lt;/p&gt;

&lt;p&gt;重启应用程序，并浏览到&lt;a href=&quot;http://localhost:8080/vehicle&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/vehicle&lt;/code&gt;&lt;/a&gt; - 你应该看到我们添加到&lt;code class=&quot;highlighter-rouge&quot;&gt;BootStrap&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt;实例列表。尝试新视图并创建，查看，编辑和删除某些实例。你也可以使用Model和Make控制器执行相同的操作。&lt;/p&gt;

&lt;h3 id=&quot;54-static-scaffolding&quot;&gt;5.4 Static Scaffolding&lt;/h3&gt;

&lt;p&gt;动态脚手架功能强大，多数时候会提供你需要的所有功能（特别是对于数据访问比演示更重要的管理站点）。但很可能你会觉得需要自定义生成的视图和控制器，以改变其外观或添加自定义逻辑和功能。Grails预见到了这种需求，并提供了一组生成命令（generate commands），可以生成你刚刚看到的控制器 和/或 视图，允许你修改它们以满足你的需求。&lt;/p&gt;

&lt;p&gt;生成视图（并继续使用动态脚手架）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw generate-views Vehicle
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;你要生成的部分是&lt;code class=&quot;highlighter-rouge&quot;&gt;静态的scaffold&lt;/code&gt;，没有生成会继续使用&lt;code class=&quot;highlighter-rouge&quot;&gt;动态scaffold&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要生成控制器（并继续使用动态GSP视图）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw generate-controller Vehicle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于视图和控制器（绕过所有动态生成）：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw generate-all Vehicle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;生成的控制器将放在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/controller&lt;/code&gt;下，生成的视图将放在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/vehicle&lt;/code&gt;下。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;要覆盖现有文件，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-force&lt;/code&gt;标志和&lt;code class=&quot;highlighter-rouge&quot;&gt;generate-*&lt;/code&gt;命令：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;./ grailsw generate-all com.example.Vehicle -force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们为&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt;生成控制器和视图，并查看生成的控制器。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw generate-all Vehicle -force
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/controllers/org/grails/guides/&lt;/code&gt;上打开&lt;code class=&quot;highlighter-rouge&quot;&gt;VehicleController.groovy&lt;/code&gt;文件。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意由于版本问题，下述代码可能会与你的实际代码有细微区别，不过这并无大碍，让我们抓大放小。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/VehicleController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NOT_FOUND&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides.Vehicle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.transaction.Transactional&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LineLength'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VehicleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'scaffolding'&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowedMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;save:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;update:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;delete:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DELETE'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;vehicleCount:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'FactoryMethodName'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GrailsMassAssignment'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'create'&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flush:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 4.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 5.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default.created.message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vehicle.label'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vehicle'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;status:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CREATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'edit'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flush:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 5.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default.updated.message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vehicle.label'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vehicle'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;status:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactionStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRollbackOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;flush:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 5.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default.deleted.message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vehicle.label'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vehicle'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;method:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 6.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'*'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;status:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NO_CONTENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 7.&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multipartForm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 5.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default.not.found.message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;args:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;code:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'vehicle.label'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vehicle'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;method:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GET'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//6.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.grails.org/latest/api/grails/transaction/Transactional.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional 注解&lt;/code&gt;&lt;/a&gt;配置了控制器或方法的事务行为。事务用于管理持久性和应该一起完成的其他复杂操作（如果任何一个步骤失败，可能会回滚）。有关事务的更多信息，请参阅&lt;a href=&quot;http://docs.grails.org/latest/guide/single.html#declarativeTransactions&quot;&gt;Grails文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt;对象可供所有控制器使用，并包含请求中任何URL参数的映射。你可以按名称引用任何参数来检索值：&lt;code class=&quot;highlighter-rouge&quot;&gt;params.myCustomParameter&lt;/code&gt;将匹配此URL参数：&lt;code class=&quot;highlighter-rouge&quot;&gt;[url]?myCustomParameter=hello&lt;/code&gt;。有关更多详细信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/params.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;方法把对象返回给请求者，使用&lt;a href=&quot;https://docs.grails.org/latest/guide/theWebLayer.html#contentNegotiation&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;content negotiation（内容协商）&lt;/code&gt;&lt;/a&gt;来选择正确的类型（例如，请求的Accept头可能指定JSON或XML）。&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;也可以接受参数映射，例如model（定义数据在页面上加载的方式）。有关如何使用该&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;方法的更多信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/respond.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt;在所有控制器上都可用，它是&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt;的&lt;a href=&quot;https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpServletRequest类&lt;/code&gt;&lt;/a&gt;的一个实例。你可以访问请求标头，在请求范围中存储属性，并使用此对象获取有关请求者的信息。有关更多信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/request.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt;是一个映射，用于存储会话中的对象以用于下一个请求，&lt;em&gt;在下一个请求完成后自动清除它们&lt;/em&gt;。这对于传递你希望&lt;em&gt;下一个请求访问的错误消息&lt;/em&gt;或其他数据非常有用。有关更多信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/flash.html&quot;&gt;Grails文档flash&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;redirect&lt;/code&gt;方法很简单 - 它允许操作将请求重定向到另一个操作，控制器或URI。你还可以使用重定向传递参数。有关更多信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/redirect.html&quot;&gt;Grails文档&lt;code class=&quot;highlighter-rouge&quot;&gt;redirect&lt;/code&gt;&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;方法是一个不太复杂的版本&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;——它&lt;em&gt;不执行内容协商&lt;/em&gt;，因此你必须准确指定要呈现的内容。你可以呈现纯文本，视图或模板，HTTP响应代码或具有String表示形式的任何对象。请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/render.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这一部分有很多代码！&lt;/p&gt;

&lt;p&gt;生成和修改脚手架控制器是一个很好的学习练习，因此可以随意尝试和修改此代码——你始终可以恢复到&lt;code class=&quot;highlighter-rouge&quot;&gt;completed&lt;/code&gt;本指南的项目中的版本。（这里指的是英文版的github中的项目）&lt;/p&gt;

&lt;h3 id=&quot;55-render-a-response&quot;&gt;5.5 Render a response&lt;/h3&gt;

&lt;p&gt;让我们修改&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;，使我们能在主页上呈现一些自定义内容。编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/controllers/org/grails/guides/HomeController.groovy&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/HomeController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'User'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vehicleTotal:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()])&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2.&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Name has been updated&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 3.&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 4.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;我们正在调用&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;方法向请求者渲染出Groovy内容映射&lt;code class=&quot;highlighter-rouge&quot;&gt;render a Groovy map of content to the requestor&lt;/code&gt;，其中包含 1.会话中的属性&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;（如果不存在会话值，则默认为“User”）以及 2. GORM的&lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;方法返回的，当前Vehicle的实例总数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Servlet API&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpSession&lt;/code&gt;类的一个实例，并且在每个控制器中都可用。我们可以在会话中检索和存储属性——在这种情况下，我们将在会话中存储&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型的属性&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;。有关更多信息，请参阅&lt;a href=&quot;https://docs.grails.org/latest/ref/Controllers/session.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/li&gt;
  &lt;li&gt;我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;flash&lt;/code&gt;语句来设置在下一个请求时显示的消息&lt;/li&gt;
  &lt;li&gt;我们没有在此操作中显示任何特定内容的需求，因此我们向index操作发出&lt;code class=&quot;highlighter-rouge&quot;&gt;redirect&lt;/code&gt;重定向（请注意，只要存在至少一个参数，Groovy方法中的括号是可选的）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们更新了我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;操作以向页面呈现一些自定义内容，并且我们创建了一个新操作&lt;code class=&quot;highlighter-rouge&quot;&gt;updateName&lt;/code&gt;，该操作接受一个&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;参数并将其保存到&lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt;，为了以后的检索使用。但是，我们需要将视图更新为1.显示新可用的内容，以及2.提供一些调用updateName和设置session属性的方法。&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/home/index.gsp&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row colset-2-its&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome ${name}!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;${flash.message}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. --&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;There are ${vehicleTotal} vehicles in the database.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/updateName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 0 auto; width:320px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 3. --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Update name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Update name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Update name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;我们可以使用Groovy String Expressions &lt;code class=&quot;highlighter-rouge&quot;&gt;${name}&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;${vehicleTotal}&lt;/code&gt;在GSP页面中按名称引用我们的“模型”中的任何值。&lt;/li&gt;
  &lt;li&gt;在这里，我们访问我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;flash.message&lt;/code&gt;属性——如果它为null，则此处不会呈现任何内容。&lt;/li&gt;
  &lt;li&gt;这是一个纯HTML表单，它将名称文本字段提交给我们刚刚创建的updateName操作。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行应用程序，你应该在
标题中看到我们的新消息：&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Welcome User!&quot;&lt;/code&gt;，以及数据库中当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt;实例总数。&lt;/p&gt;

&lt;p&gt;尝试在表单中输入你自己的名称并提交——你应该看到页面重新加载，你自己的名称将替换”User”,刷新页面几次。因为我们将名称存储在会话中，所以只要会话有效，它就会一直存在。&lt;/p&gt;

&lt;h3 id=&quot;56-content-negotiation&quot;&gt;5.6 Content Negotiation&lt;/h3&gt;

&lt;p&gt;请记住，我们使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;respond&lt;/code&gt;方法，而不是使用更简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;方法将”model”发送到页面。这意味着除了HTML页面之外，我们可以使用其他格式来获取模型，例如JSON或XML。&lt;/p&gt;

&lt;p&gt;在终端中运行以下命令（在应用程序运行时）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ curl -i -H &quot;Accept: application/json&quot; &quot;http://localhost:8080/home/index&quot;

HTTP/1.1 200
X-Application-Context: application:development
Set-Cookie: JSESSIONID=008B45AAA1A820CE5C9FDC2741D345F3;path=/;HttpOnly
Content-Type: application/json;charset=UTF-8
Transfer-Encoding: chunked
Date: Wed, 11 Jan 2017 04:06:57 GMT

{&quot;name&quot;:&quot;User&quot;,&quot;vehicleTotal&quot;:3}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;来调用我们的索引操作，但是我们已经将&lt;code class=&quot;highlighter-rouge&quot;&gt;Accept&lt;/code&gt;标头更改为&lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;。现在我们在JSON中收到相同的数据，而不是HTML页面。&lt;/p&gt;

&lt;p&gt;由于Grails的默认URL映射（如下所示），你也可以在浏览器中请求不同的内容类型：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/UrlMappings.groovy&lt;/span&gt;

        &lt;span class=&quot;s2&quot;&gt;&quot;/$controller/$action?/$id?(.$format)?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;constraints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// apply constraints here&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意&lt;code class=&quot;highlighter-rouge&quot;&gt;(.$format)?&lt;/code&gt;映射中的令牌。这将匹配我们的URL上的后缀，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;.xml&lt;/code&gt;。在浏览器中测试一下。&lt;/p&gt;

&lt;p&gt;浏览&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/home/index.json&lt;/code&gt;。你应该看到我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;检索的相同JSON主体。&lt;/p&gt;

&lt;p&gt;尝试将&lt;code class=&quot;highlighter-rouge&quot;&gt;.json&lt;/code&gt;更改为&lt;code class=&quot;highlighter-rouge&quot;&gt;.xml&lt;/code&gt;。你应该看到模型的XML表示。&lt;code class=&quot;highlighter-rouge&quot;&gt;content negotiation&lt;/code&gt;会让你的控制器变得非常通用，并通过相同的操作将适当的数据返回给不同的客户端。&lt;/p&gt;

&lt;h2 id=&quot;6-views&quot;&gt;6 Views&lt;/h2&gt;

&lt;p&gt;视图是&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;模式的第三个组成部分。视图负责向用户（可能是浏览器页面，API端点或其他类型的消费者）&lt;strong&gt;呈现数据&lt;/strong&gt;。在许多应用程序中，视图是设计为在浏览器中加载的HTML页面。但是，根据请求视图的客户端类型，“视图”是XML或JSON文档是完全合理的。&lt;/p&gt;

&lt;p&gt;Grails的主要视图技术是&lt;a href=&quot;http://docs.grails.org/latest/guide/theWebLayer.html#gsp&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy Server Pages&lt;/code&gt;&lt;/a&gt;。它&lt;em&gt;遵循JSP和ASP的许多约定&lt;/em&gt;，但自然它基于Groovy语言。 GSP页面本质上是HTML文档，但它们支持许多特殊标记（通常以&lt;code class=&quot;highlighter-rouge&quot;&gt;g:&lt;/code&gt;)作为前缀，以允许对你的视图进行编程控制。你甚至可以在GSP页面中编写任意Groovy代码，但强烈建议不要这样做 - 理想情况下，GSP页面应该只包含与视图相关的逻辑和内容;在呈现视图之前，控制器（或服务）中应该已经将任何类型的数据操作或处理完成。&lt;/p&gt;

&lt;p&gt;你已经在本指南中使用了GSP视图，但让我们快速介绍一下基础知识。&lt;/p&gt;

&lt;h3 id=&quot;layouts&quot;&gt;Layouts&lt;/h3&gt;

&lt;p&gt;应用程序中的GSP视图通常需要共享一些通用结构，也许还需要一些共享资源，如JavaScript文件。 Grails使用&lt;a href=&quot;http://wiki.sitemesh.org/wiki/display/sitemesh/Home&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SiteMesh&lt;/code&gt;&lt;/a&gt;模板技术来支持“布局”的概念，“布局”本质上是&lt;em&gt;GSP页面可以“继承”的GSP模板文件&lt;/em&gt;。&lt;/p&gt;

&lt;p&gt;按照惯例，布局位于&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/layouts&lt;/code&gt;下。 Grails在默认项目中包含一个&lt;code class=&quot;highlighter-rouge&quot;&gt;main.gsp&lt;/code&gt;模板，这是Grails脚手架使用的模板，以及默认主页。我们也在使用它。要使用GSP布局，只需使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta name=&quot;layout&quot;&amp;gt;&lt;/code&gt;标签指定布局的名称：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/layouts/main.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你也可以创建自己的布局。让我们为我们的主页创建一个新的布局。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ vim grails-app/views/layouts/public.gsp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑新布局。我们将复制现有的main.gsp作为开始，但我们将添加自定义徽标图像并删除我们页面上不需要的一些布局代码。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/layouts/public.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html; charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IE=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:layoutTitle&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;default=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Auto Catalog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:layoutHead/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar navbar-default navbar-static-top&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-brand&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fa grails-icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;logo.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/i&amp;gt;&lt;/span&gt; Auto Catalog
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-collapse collapse&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 0.8px;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav navbar-nav navbar-right&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:pageProperty&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page.nav&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;g:layoutBody/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;footer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contentinfo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此布局的关键点是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g：layoutbody&amp;gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g：layouthead&amp;gt;&lt;/code&gt;标记。 &lt;code class=&quot;highlighter-rouge&quot;&gt;SiteMesh&lt;/code&gt;将这些标记替换为使用该布局的任何GSP页面的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt;部分。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你可以随意提供自己的logo.png图像，或使用已完成项目中的图像（或通过&lt;a href=&quot;https://github.com/grails-guides/creating-your-first-grails-app/blob/master/complete/grails-app/assets/images/logo.png&quot;&gt;此链接&lt;/a&gt;下载）。将图像放在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/assets/images/&lt;/code&gt;目录中，布局应该呈现它而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;徽标。
不要担心新布局中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asset&amp;gt;&lt;/code&gt;标签——我们将很快介绍这些标签。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;home/index.gsp&lt;/code&gt;视图以使用新的公共布局。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;把&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;main&quot;&lt;/code&gt;换为&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;public&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;刷新页面（或重新启动应用程序），你应该可以立即看到新的布局。如果你愿意，可以随意进一步修改&lt;code class=&quot;highlighter-rouge&quot;&gt;public.gsp&lt;/code&gt;布局。&lt;/p&gt;

&lt;h3 id=&quot;61-views-resolution&quot;&gt;6.1 Views Resolution&lt;/h3&gt;

&lt;p&gt;Grails是如何知道要要选择哪个视图去渲染呢？按照惯例，Grails在&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views&lt;/code&gt;目录下查找视图。它将尝试通过将控制器名称与&lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt;目录下的目录进行匹配来解析对控制器操作的视图。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController&lt;/code&gt;将解析为&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/home&lt;/code&gt;。然后，Grails会将操作映射到具有相同名称的GSP页面。例如，索引将解析为&lt;code class=&quot;highlighter-rouge&quot;&gt;index.gsp&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;你还可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;方法从控制器操作渲染特定视图（覆盖Grails的约定）：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'anotherView'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将尝试解析为&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/some/&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;anotherView.gsp&lt;/code&gt;页面。如果你想要解析不在控制器自己的视图目录下的视图，请使用&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;来指定&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views&lt;/code&gt;中的绝对路径：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;view:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/another/view'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将解析为&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/another/&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;view.gsp&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;62-gsp&quot;&gt;6.2 GSP&lt;/h3&gt;

&lt;p&gt;GSP页面可以访问丰富的&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;标签集。我们已经看到了一些&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;。你可以从Grails文档中获取有关可用GSP标记（包括如何定义自定义标记）的更多详细信息。&lt;/p&gt;

&lt;p&gt;让我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;index.gsp&lt;/code&gt;页面上添加一些GSP&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/home/index.gsp&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;import=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vehicle&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;layout&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;public&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Home Page&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;row colset-2-its&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome ${name}!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${flash.message}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1.--&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;${flash.message}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:if&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;There are ${vehicleTotal} vehicles in the database.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:each&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;in=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${Vehicle.list()}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${vehicle.id}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    ${vehicle.name} - ${vehicle.year} ${vehicle.make.name} ${vehicle.model.name}
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:link&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:each&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateName&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;margin: 0 auto; width:320px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:textField&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:submitButton&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Update name&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:form&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:if&amp;gt;&lt;/code&gt;标签测试是否有&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;，然后渲染&lt;code class=&quot;highlighter-rouge&quot;&gt;message&lt;/code&gt;（使用一些自定义样式），而不是一味地渲染&lt;code class=&quot;highlighter-rouge&quot;&gt;flash.message&lt;/code&gt;而不管它是否存在。&lt;/li&gt;
  &lt;li&gt;将纯HTML&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标记替换为其GSP等效项。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;让我们仔细看看&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:if&amp;gt;&lt;/code&gt;。&lt;/p&gt;

&lt;!--  TODO --&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;test=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${isThisTrue}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        Some content
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:if&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;GSP tag可以接受attributes(属性)，例如本例中的测试。不同的标签需要不同类型的属性，但通常你最终会像本示例中那样传递&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy Expression&lt;/code&gt;。将评估&lt;code class=&quot;highlighter-rouge&quot;&gt;${&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;之间的任何Groovy代码（在服务器上），结果将在呈现的页面上替换。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你可以在GSP页面的任何位置使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy Expressions&lt;/code&gt;，而不仅仅是在标签中。可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;index.gsp&lt;/code&gt;页面中的&lt;code class=&quot;highlighter-rouge&quot;&gt;${flash.message}&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其他标记属性可能接受普通字符串或数字。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:form action=&quot;“updateName”&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GSP tag&lt;/code&gt;也可以选择包括一个主体。在&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:if&amp;gt;&lt;/code&gt;的情况下，只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;表达式求值为true时才会呈现正文（遵循&lt;a href=&quot;http://docs.groovy-lang.org/latest/html/documentation/#Groovy-Truth&quot;&gt;Groovy Truth&lt;/a&gt;约定）。其他GSP标记（如&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:form&amp;gt;&lt;/code&gt;）只是在生成的HTML输出中包含正文。&lt;/p&gt;

&lt;h3 id=&quot;63-gsp-tags-iteration&quot;&gt;6.3 GSP Tags Iteration&lt;/h3&gt;

&lt;h4 id=&quot;631-iteration&quot;&gt;6.3.1 Iteration&lt;/h4&gt;

&lt;p&gt;还有用于迭代的GSP标签——非常有用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:each&amp;gt;&lt;/code&gt;。我们来试试吧：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;%@&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;import=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vehicle&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;There are ${vehicleTotal} vehicles in the database.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:each&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;in=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${Vehicle.list()}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;var=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:each&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- ... --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:each&amp;gt;&lt;/code&gt;标记遍历由&lt;code class=&quot;highlighter-rouge&quot;&gt;in&lt;/code&gt;属性提供的对象集合。 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;设置集合中每个对象的名称。 Grails将遍历集合（在本例中为&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle.list()&lt;/code&gt;返回的Vehicle列表），并为每个项目呈现&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:each&amp;gt;&lt;/code&gt;标记的主体。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;这是一个JSP样式的表达式，允许执行任意Groovy代码（而不会渲染结果）。我们在这里使用它来导入我们的Vehicle类。然而这种方式是非常令人沮丧的——我们很快就会解释原因。&lt;/li&gt;
  &lt;li&gt;不好的做法，直接从视图访问&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;这种代码是一个坏主意 - 我们直接从我们的视图访问我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;domain class&lt;/code&gt;（Vehicle），它紧密地耦合应用程序的两个独立部分，并且通常导致非常混乱的代码。完成此功能的更好方法是在&lt;code class=&quot;highlighter-rouge&quot;&gt;HomeController.index&lt;/code&gt;操作中获取&lt;em&gt;Vehicle列表&lt;/em&gt;，并将列表添加到我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;/code&gt;（the one being passed to respond(传递给响应的对象)）。然后我们可以像访问&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;vehicleTotal&lt;/code&gt;那样引用列表。继续更改控制器和视图以使用这种更好的方法 - 如果你需要帮助，已完成的项目已经进行了此更改。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;64-gsp-tags-links&quot;&gt;6.4 GSP Tags Links&lt;/h3&gt;

&lt;p&gt;我们来看一个更常见的GSP标记：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:link&amp;gt;&lt;/code&gt;s&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vehicle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${vehicle.id}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        ${vehicle.name} - ${vehicle.year} ${vehicle.make.name} ${vehicle.model.name}
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/g:link&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:link&amp;gt;&lt;/code&gt;呈现HTML &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标记，但它的优点在于&lt;em&gt;它允许你按照Grails约定指定链接目标&lt;/em&gt;，例如本示例（使用&lt;code class=&quot;highlighter-rouge&quot;&gt;controller&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;属性）。 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:link&amp;gt;&lt;/code&gt;也非常智能，可以跟踪我们的URL映射，因此如果我们更改&lt;code class=&quot;highlighter-rouge&quot;&gt;vehicle/show&lt;/code&gt;的URL映射，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:link&amp;gt;&lt;/code&gt;标记仍将呈现正确的URL。 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:link&amp;gt;&lt;/code&gt;支持更多属性 - 有关详细信息，请参阅&lt;a href=&quot;http://docs.grails.org/latest/ref/Tags/link.html&quot;&gt;Grails文档&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;65-asset-pipeline&quot;&gt;6.5 Asset Pipeline&lt;/h3&gt;

&lt;p&gt;你可能已经注意到我们的GSP页面中有一些&lt;asset&gt;标签。这些标签由`Asset Pipeline`插件提供，这是Grails用于管理`static assets`静态资源（图像，CSS，JavaScript文件等）的默认工具。 `Asset Pipeline`插件提供了一组自定义GSP标记，但与我们一直在探索的标记不同，它使用`asset`前缀（或命名空间）。&lt;/asset&gt;&lt;/p&gt;

&lt;p&gt;最常见的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;asset&amp;gt;&lt;/code&gt;标签如下：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:javascript&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myscript.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1.  --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myimage.png&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 2. --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:stylesheet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mystyles.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 3. --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;此标记从&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/assets/javascripts&lt;/code&gt;加载&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;文件&lt;/li&gt;
  &lt;li&gt;此标记从&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/assets/images&lt;/code&gt;加载图像&lt;/li&gt;
  &lt;li&gt;此标记从&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/assets/stylesheets&lt;/code&gt;加载CSS文件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;正如你所看到的，&lt;code class=&quot;highlighter-rouge&quot;&gt;Asset Pipeline&lt;/code&gt;遵循约定优于配置方法，遵循Grails的先例。但是，&lt;code class=&quot;highlighter-rouge&quot;&gt;Asset Pipeline&lt;/code&gt;是一个非常强大的框架，包含一个丰富的插件生态系统 - 你可以找到插件来渲染&lt;code class=&quot;highlighter-rouge&quot;&gt;LESS&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;SASS&lt;/code&gt;文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;CoffeeScript&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Ember&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Angular&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;JSX（React）&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Asset Pipeline&lt;/code&gt;还支持缩小和压缩你的资源等等。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;访问&lt;a href=&quot;http://www.asset-pipeline.com/&quot;&gt;asset-pipeline.com&lt;/a&gt;以获取有关使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Asset Pipeline&lt;/code&gt;的更多信息，包括&lt;a href=&quot;http://www.asset-pipeline.com/plugins&quot;&gt;可用插件的目录&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;66-add-javascript-asset&quot;&gt;6.6 Add Javascript Asset&lt;/h3&gt;

&lt;p&gt;让我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Asset Pipeline&lt;/code&gt;插件将&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;添加到我们的页面。 &lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;默认包含&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt;。本指南中使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;版本默认包含&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery&lt;/code&gt; 2.2.0：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_grails-app/assets/javascripts/jquery-2.2.0.min.js_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但是让我们下载最新版本。从https://code.jquery.com/jquery-3.1.1.js 下载jQuery&lt;/p&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;jquery-3.1.1.js&lt;/code&gt;保存到&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/assets/javascripts&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/home/index.gsp&lt;/code&gt;，在head块中添加以下代码段。&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;asset:javascript&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jquery-3.1.1.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;jQuery 3.1.1 loaded!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;刷新页面，然后打开浏览器的开发人员控制台。你应该能看到字符串&lt;code class=&quot;highlighter-rouge&quot;&gt;jQuery 3.1.1 loaded!&lt;/code&gt;在控制台日志中。&lt;/p&gt;

&lt;h2 id=&quot;7-services&quot;&gt;7 Services&lt;/h2&gt;

&lt;p&gt;Grails提供了一个“&lt;code class=&quot;highlighter-rouge&quot;&gt;service layer&lt;/code&gt;服务层”，它们是封装业务逻辑的类，并且是有线的（使用&lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;dependency injection 依赖注入&lt;/a&gt;）连接到应用程序上下文中，因此任何控制器都可以注入和使用它们。&lt;em&gt;服务是大多数应用逻辑的首选工具，而不是控制器。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;如果这看起来令人困惑，请按照这种方式考虑：&lt;em&gt;控制器旨在响应请求并返回响应&lt;/em&gt;。服务可以在许多控制器（以及域类和其他服务）中重用。服务更加通用，可以帮助你保持控制器简洁，防止重复业务逻辑。对服务方法编写单元测试通常比对控制器操作更容易。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;控制器用于“Web逻辑”，&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt;用于“业务逻辑”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照惯例，&lt;code class=&quot;highlighter-rouge&quot;&gt;Grails&lt;/code&gt;会将&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/services&lt;/code&gt;目录中的任何&lt;code class=&quot;highlighter-rouge&quot;&gt;Groovy&lt;/code&gt;类配置为服务。服务将在Grails应用程序上下文中“连接”为&lt;a href=&quot;https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring bean&lt;/code&gt;&lt;/a&gt;，这意味着你可以通过任何其他&lt;code class=&quot;highlighter-rouge&quot;&gt;Spring bean&lt;/code&gt;（包括控制器和域类）的名称简单地引用它们。&lt;/p&gt;

&lt;p&gt;让我们添加一个功能，根据品牌，型号和年份生成&lt;code class=&quot;highlighter-rouge&quot;&gt;Vehicle&lt;/code&gt;的估算值。我们将这个逻辑放在一个服务中，并从我们的应用程序代码中调用它。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;create-service&lt;/code&gt;命令创建新服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw create-service ValueEstimateService

| Created grails-app/services/org/grails/guides/ValueEstimateService.groovy
| Created src/test/groovy/org/grails/guides/ValueEstimateServiceSpec.groovy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑grails-app/services/org/grails/guides/ValueEstimateService.groovy&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/services/org/grails/guides/ValueEstimateService.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.transaction.Transactional&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueEstimateService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;serviceMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Grails提供了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;serviceMethod&lt;/code&gt;作为示例。删除它并将其替换为以下内容：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/services/org/grails/guides/ValueEstimateService.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.transaction.Transactional&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueEstimateService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getEstimate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Estimating vehicle value...'&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//TODO: Call third-party valuation API&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;round&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;显然，这种估算车辆价值的方法非常人为！实际上，你可能会调用第三方Web服务来获取评估，或者可能针对你自己的数据库运行查询。但是，&lt;em&gt;此示例的要点是显示可以放在服务中的“业务逻辑”，而不是在控制器或视图中计算。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;现在，让我们使用我们的新服务。&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/controllers/org/grails/guides/VehicleController.groovy&lt;/code&gt;（我们之前生成的脚手架控制器），并添加如下所示的属性：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/VehicleController.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;springframework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CREATED&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides.Vehicle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.transaction.Transactional&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'LineLength'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readOnly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VehicleController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowedMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;save:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;update:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'PUT'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;delete:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DELETE'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueEstimateService&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;通过简单地在控制器中定义一个与我们的服务类同名的属性，Grails将为我们注入对服务的引用。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在（仍在编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;VehicleController.groovy&lt;/code&gt;），修改&lt;code class=&quot;highlighter-rouge&quot;&gt;show&lt;/code&gt;动作，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// grails-app/controllers/org/grails/guides/VehicleController.groovy&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;respond&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;estimatedValue:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueEstimateService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEstimate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们在&lt;code class=&quot;highlighter-rouge&quot;&gt;model&lt;/code&gt;中添加了新属性，名为&lt;code class=&quot;highlighter-rouge&quot;&gt;estimatedValue&lt;/code&gt;。这个属性的值是调用我们的服务方法&lt;code class=&quot;highlighter-rouge&quot;&gt;getEstimate&lt;/code&gt;的结果，我们将传递我们要渲染的车辆属性。&lt;/p&gt;

&lt;p&gt;现在，在显示页面上，我们可以访问&lt;code class=&quot;highlighter-rouge&quot;&gt;estimatedValue&lt;/code&gt;属性并在页面上显示它。编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;grails-app/views/vehicle/show.gsp&lt;/code&gt;，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- grails-app/views/vehicle/show.gsp --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show-vehicle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content scaffold-show&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;g:message&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;default.show.label&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;args=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[entityName]&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Estimated Value: &lt;span class=&quot;nt&quot;&gt;&amp;lt;g:formatNumber&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;number=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${estimatedValue}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;currency&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;currencyCode=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;USD&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 1. --&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;g:formatnumber&amp;gt;&lt;/code&gt;是另一个GSP标记，它为渲染数字提供了许多有用的选项，包括货币和小数精度。有关更多信息，请参阅Grails文档。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;重新启动应用程序并浏览到车辆的显示页面，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:8080/vehicle/show/1&lt;/code&gt;。你应该在页面上看到“估计值”&lt;/p&gt;

&lt;h2 id=&quot;8-testing-your-app&quot;&gt;8 Testing your App&lt;/h2&gt;

&lt;p&gt;测试是Web应用程序开发的重要部分。 Grails为三种类型的测试提供支持：单元测试，集成测试和功能测试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.grails.org/latest/guide/testing.html#unitTesting&quot;&gt;单元测试&lt;/a&gt;通常是最简单的一种，专注于特定的代码而不依赖于应用程序的其他部分。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.grails.org/latest/guide/testing.html#integrationTesting&quot;&gt;集成测试&lt;/a&gt;要求Grails环境启动并运行，并用于测试依赖于数据库或网络资源的功能。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.grails.org/latest/guide/testing.html#functionalTesting&quot;&gt;功能测试&lt;/a&gt;要求应用程序运行，并且旨在通过对其发出HTTP请求，几乎以用户的身份运行应用程序。这些往往是最复杂的测试。&lt;/p&gt;

&lt;p&gt;Grails使用的测试框架是&lt;a href=&quot;http://spockframework.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spock&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Spock&lt;/code&gt;提供了一种基于Groovy语言编写测试用例的富有表现力的语法，因此非常适合Grails。它包括一个&lt;code class=&quot;highlighter-rouge&quot;&gt;JUnit runner&lt;/code&gt;，这意味着IDE支持是有效的通用（任何可以运行JUnit测试的IDE都可以运行&lt;code class=&quot;highlighter-rouge&quot;&gt;Spock&lt;/code&gt;测试）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Spock是一个丰富的框架（甚至在Grails应用程序之外），如果你还没有，那么值得你花时间去掌握它。查看&lt;a href=&quot;http://docs.spockframework.org/&quot;&gt;有关Spock简介的大量文档&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grails测试（按照惯例）存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/groovy&lt;/code&gt;目录（单元测试）和&lt;code class=&quot;highlighter-rouge&quot;&gt;src/integration-test/groovy&lt;/code&gt;目录（集成/功能测试）中。&lt;/p&gt;

&lt;p&gt;你可以使用&lt;a href=&quot;http://docs.grails.org/latest/ref/Command%20Line/test-app.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test-app&lt;/code&gt;&lt;/a&gt;命令运行Grails测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果只想运行单元测试或集成/功能测试，可以传入命令行标志来选择其中一个。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw test-app -unit
$ ./grailsw test-app -integration
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你还可以通过将测试类作为参数传递来运行特定测试：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw test-app org.grails.guides.MyTestSpec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编写测试是一个非常广泛的主题，值得用专门的时间去了解。在实践中，最简单（通常是最有用的）测试是单元测试，所以让我们编写一个简单的单元测试来练习我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueEstimateService&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;Grails自动为使用&lt;code class=&quot;highlighter-rouge&quot;&gt;create-service&lt;/code&gt;命令创建的服务创建测试规范。打开&lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/groovy/org/grails/guides/ValueEstimateServiceSpec&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/test/groovy/org/grails/guides/ValueEstimateServiceSpec&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.testing.gorm.DataTest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.testing.services.ServiceUnitTest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spock.lang.Specification&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueEstimateServiceSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Specification&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceUnitTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueEstimateService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test something&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;expect:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fix me&quot;&lt;/span&gt;
            &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;目前我们的测试规范有一个测试，&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;test something&quot;&lt;/code&gt;，断言&lt;code class=&quot;highlighter-rouge&quot;&gt;true == false&lt;/code&gt;。 Grails有助于你通过在测试失败的情况下解决问题来做正确的事情。&lt;/p&gt;

&lt;p&gt;尝试运行测试，只是为了确认它必定失败：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;
$ /grailsw test-app org.grails.guides.ValueEstimateServiceSpec

...
&amp;gt; There were failing tests. See the report at: file:///Users/dev/projects/creating-your-first-grails-app/complete/build/reports/tests/test/index.html

BUILD FAILED

Total time: 6.353 secs
| Tests FAILED Test execution failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在我们已经确认我们的测试失败了，让我们编辑这个测试用例来检验我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;getEstimate&lt;/code&gt;方法。编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;src/test/groovy/org/grails/guides/ValueEstimateServiceSpec&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// src/test/groovy/org/grails/guides/ValueEstimateServiceSpec.groovy&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.grails.guides&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.testing.gorm.DataTest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;grails.testing.services.ServiceUnitTest&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;spock.lang.Specification&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValueEstimateServiceSpec&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Specification&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceUnitTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueEstimateService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockDomain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockDomain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mockDomain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testEstimateRetrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;given:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a vehicle'&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;year:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;make:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;model:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Test Vehicle'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;when:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'service is called'&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEstimate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vehicle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;then:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a non-zero result is returned'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;nl&quot;&gt;and:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'estimate is not too large'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;estimate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;使用Grails 3.3中更新的测试框架模拟多个对象时，我们现在在安装过程中执行模拟，不再需要&lt;code class=&quot;highlighter-rouge&quot;&gt;@Mock&lt;/code&gt;注释。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们在这个测试中保持了非常简单的事情，因为我们没有非常复杂的逻辑用来测试，但是你也可以专注于Spock测试用例的基本公式。 Spock提供了一组关键字，允许你以人类可读的形式编写测试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;given&lt;/code&gt; 表示&lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;语句 —— 你可以在此处设置完成测试所需的任何对象或变量。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;when&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; 是Spock中最常见的“一对儿”之一（另一个，这里没有使用，是&lt;code class=&quot;highlighter-rouge&quot;&gt;expect/where&lt;/code&gt; —— 它们定义了一个声明和一个预期的结果。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;继续当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt;语句，但它允许你指定你对多个断言的期望。请注意，所有这些块都接受（可选）字符串描述，这使你的测试更具可读性。例如，&lt;code class=&quot;highlighter-rouge&quot;&gt;when: &quot;this method is called&quot;, then: &quot;expect this result&quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;继续并重新运行此测试 - 如果一切顺利，它应该通过测试，并伴随一个小旗子。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-BASH&quot;&gt;$ ./grailsw test-app org.grails.guides.ValueEstimateServiceSpec

...

BUILD SUCCESSFUL

| Tests PASSED
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;9-deploying-your-app&quot;&gt;9 Deploying your App&lt;/h2&gt;

&lt;p&gt;开发Grails应用程序的最后一步是将完成的项目构建为可部署的包。通常，Java Web应用程序被部署为&lt;code class=&quot;highlighter-rouge&quot;&gt;WAR&lt;/code&gt;文件，而Grails使用&lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt;命令可以轻松实现：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw war
...
BUILD SUCCESSFUL

| Built application to build/libs using environment: production
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们没有在本指南中涉及&lt;a href=&quot;http://docs.grails.org/latest/guide/conf.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;configuration&lt;/code&gt;&lt;/a&gt;的相关主题（虽然我们对配置文件进行了一些编辑），但是值得一提的是Grails支持环境概念，例如“开发”，“测试”和“生产”。每个环境都可以拥有自己的配置属性和值，因此你可以在开发和生产系统之间进行不同的设置。默认情况下，war命令使用“生产”环境 - 你可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-Dgrails.env&lt;/code&gt;标志覆盖它，如下所示：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ ./grailsw war -Dgrails.env=development
...
BUILD SUCCESSFUL

| Built application to build/libs using environment: development
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦我们获得了&lt;code class=&quot;highlighter-rouge&quot;&gt;WAR&lt;/code&gt;文件，我们就可以将它部署在任何JEE容器中，例如&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tomcat&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;恭喜！你已经构建了第一个Grails应用程序。
**&lt;/p&gt;</content><author><name>FKY</name></author><category term="tutor" /><summary type="html">汉化：完成 校对文字：C9 添加链接：C9 Windows/Mac 兼容 增加code中文件名 专有名词修订 修正错误 整理编号 profile 配置？ controller 控制器 domain 域 domain class 域类 model 模型 view 视图 scaffold 脚手架 transaction 事物 action 方法 一般针对设计模式 method 方法 一般针对函数 content negotiation 内容协商 layout 布局 render 渲染 注意一下，作者有时展示了完成一个功能的多种方法，所以强烈建议你在看完每一小段的教程之后再亲自动手。 本文基于Zachary Klein的Creating your first Grails Application 学习如何创建一个Grails应用，从无到有。 Version： grails -v | Grails Version: 3.3.8 | Groovy Version: 2.4.15 | JVM Version: 1.8.0_202 1 让我们开始 在这篇文章中，你将要从无到有创建一个Grails应用程序。你将会学习有关Domain、Controller、Services、GSP、单元、集成测试等相关知识。这篇文章是为了那些第一次接触Grails框架的人而撰写的。 1.1 你需要什么 为了完成这篇文章，你需要。 一些时间 一个可用的编辑器或IDE（这里首推ULTIMATE版IDEA） 配置了环境变量的JDK1.8 1.2 如何完成这篇教程 这部分讲述了原作者建立的项目应该如何使用，但是在翻译的时候已经不太适用，所以此处的翻译略去，有兴趣的话可以访问原链接查看。 配置Grails Clone 项目 原教程项目文件 https://github.com/grails-guides/creating-your-first-grails-app 这个教程的项目有两个主要文件 initial 存放初始项目 complete 存放完整版项目 2 创建Grails项目 正如以前提到过，创建新项目不能够再简单了。 只需运行 grails create-app myApp 注意到我们并没有指定具体的包名（package），这时package会默认使用当前app名称（e.g.,myapp）。 你也可以在grails-app/conf/application.yml中修改这个参数。 或者在创建的时候使用。 grails create-app org.grails.guides.myApp 2.1 安装Grails 由于此处的方法极多，请自行搜索教程。 2.2 Grails Application Forge 超出本教程要求，因此不做翻译。 Did you know you can download a complete Grails project without installing any additional tools? Go to start.grails.org and use the Grails Application Forge to generate your Grails project. You can choose your project type (Application or Plugin), pick a version of Grails, and choose a Profile - then click “Generate Project” to download a ZIP file. No Grails installation necessary! You can even download your project from the command line using a HTTP tool like curl (see start.grails.org for API documentation): curl -O start.grails.org/myapp.zip -d version=3.2.4 -d profile=angular 2.3 应用配置（Application Profile） 注意这部分内容你并不需要亲自动手操作，只需先了解即可，因为本教程不涉及profile的内容 您可以选择为Grails应用指定profile配置文件。配置文件适用于许多常见的应用程序类型，包括rest-api，angular，react等，您甚至可以创建自己的应用程序。 要查看可用配置文件的列表，请使用list-profiles命令。 $ grails list-profiles | Available Profiles -------------------- * angular - A profile for creating applications using AngularJS * rest-api - Profile for REST API applications * base - The base profile extended by other profiles * angular2 - A profile for creating Grails applications with Angular 2 * plugin - Profile for plugins designed to work across all profiles * profile - A profile for creating new Grails profiles * react - A profile for creating Grails applications with a React frontend * rest-api-plugin - Profile for REST API plugins * web - Profile for Web applications * web-plugin - Profile for Plugins designed for Web applications * webpack - A profile for creating applications with node-based frontends using webpack 要使用配置文件，请在其前面加上-profile标志指定其名称： grails create-app myApp -profile rest-api 您可以选择指定包和版本（默认为org.grails.profiles和配置文件的当前版本） grails create-app myApp -profile org.grails.profiles:react:1.0.2 要获取有关配置文件的详细信息，请使用profile-info命令。 $ grails profile-info plugin Profile: plugin -------------------- Profile for plugins designed to work across all profiles Provided Commands: -------------------- | Error Error occurred loading commands: grails.dev.commands.ApplicationContextCommandRegistry (Use --stacktrace to see the full trace) | Error Error occurred loading commands: grails.dev.commands.ApplicationContextCommandRegistry (Use --stacktrace to see the full trace) * package-plugin - Packages the plugin into a JAR file * publish-plugin - Publishes the plugin to the Grails central repository * help - Prints help information for a specific command * open - Opens a file in the project * gradle - Allows running of Gradle tasks * clean - Cleans a Grails application's compiled sources * compile - Compiles a Grails application * create-command - Creates an Application Command * create-domain-class - Creates a Domain Class * create-service - Creates a Service * create-unit-test - Creates a unit test * install - Installs a Grails application or plugin into the local Maven cache * assemble - Creates a JAR or WAR archive for production deployment * bug-report - Creates a zip file that can be attached to issue reports for the current project * console - Runs the Grails interactive console * create-script - Creates a Grails script * dependency-report - Prints out the Grails application's dependencies * list-plugins - Lists available plugins from the Plugin Repository * plugin-info - Prints information about the given plugin * run-app - Runs a Grails application * run-command - Executes Grails commands * run-script - Executes Groovy scripts in a Grails context * shell - Runs the Grails interactive shell * stats - Prints statistics about the project * stop-app - Stops the running Grails application * test-app - Runs the applications tests Provided Features: -------------------- * asset-pipeline - Adds Asset Pipeline to a Grails project * hibernate4 - Adds GORM for Hibernate 4 to the project * hibernate5 - Adds GORM for Hibernate 5 to the project * json-views - Adds support for JSON Views to the project * less-asset-pipeline - Adds LESS Transpiler Asset Pipeline to a Grails project * markup-views - Adds support for Markup Views to the project * mongodb - Adds GORM for MongoDB to the project * neo4j - Adds GORM for Neo4j to the project * rx-mongodb - Adds RxGORM for MongoDB to the project * asset-pipeline-plugin - Adds Asset Pipeline to a Grails Plugin for packaging 在创建不带-profile的应用程序时，使用的默认配置文件是Web配置文件。 3 运行项目 既然你已经创建了这个项目，我们不妨去尝试运行一下看看效果怎么样，看看有什么东西是Grails已经为我们提供好了的。 3.1 利用不同方式启动 3.1.1 利用grails命令运行 你可以用run-app命令来运行一个Grails项目。 grails run-app 3.1.2 利用grails wrapper命令运行 在[Grails Wrapper)](http://docs.grails.org/latest/guide/introduction.html#whatsNewGrailsWrapper的帮助下，在Grails 3.2.3以后的版本中，你也可以在不安装Grails的情况下运行项目。 ./grailsw run-app # 使用wrapper 3.1.3 利用交互模式运行 你还可以利用Grails interactive mode来运行一个Grails runtime，你可以在交互模式中使用任何命令，而无需等待运行时为每个任务启动。 在本指南中，我们将更喜欢使用Grails wrapper。 $ ./grailsw | Enter a command name to run. Use TAB for completion: grails&amp;gt;run-app //you can shutdown the app with the stop-app command 3.1.4 使用Gradle运行 最后，由于Grails是基于Spring Boot和Gradle构建的，你可以使用Spring Boot的命令来与你的Grails项目交互，比如bootRun。 这些命令可用作Gradle任务。就像Grails本身一样，你无需在机器上安装Gradle。使用Gradle Wrapper（gradlew）时会自动下载 ./gradlew bootRun 运行上述任何命令后，Grails将使用嵌入式Tomcat服务器启动你的应用程序，并使其（默认情况下）可从http://localhost:8080访问。 3.2 修改端口 如果你想修改监听的端口，只需在之前提到的application.yml中加入 # grails-app/conf/application.yml server: port: 8090 一也可以在运行时直接指明端口。 ./grailsw run-app --port=8090 3.3 热更新 现在的应用首页渲染的是含有应用相关信息的默认页面。这个默认页面位于grails-app/views/index.gsp 你可以尝试这查看并修改这个页面，比如 &amp;lt;!-- grails-app/views/index.gsp --&amp;gt; &amp;lt;!-- Line 54 --&amp;gt; &amp;lt;div id=&quot;content&quot; role=&quot;main&quot;&amp;gt; &amp;lt;section class=&quot;row colset-2-its&quot;&amp;gt; &amp;lt;h1&amp;gt;Welcome to My Frist Grails Project&amp;lt;/h1&amp;gt; &amp;lt;!-- 尝试修改h1标签中的文本 --&amp;gt; 保存你的修改，并且刷新浏览器中的页面。你将会立刻看到最新的修改已经被渲染到页面上了。Grails会views、controllers，domain classes以及其他的资源更新以后auto-reload，所以你不必刻意重启服务器。 有一大部分对于domain class的操作，比如重命名、修改关系等对应用Wiring的操作可能无法被auto-reload 4 Domain Classes Grails是一个基于Spring Boot的，采用MVC架构的框架。典型的MVC架构的应用讲整个app划分为三个子项目。 Model 定义和管理数据的代码 View 管理代码如何呈现（如HTML） Controller 负责解决应用内部的逻辑，并且负责连接Model和View。Controller负责对请求做出响应，从Model中获取数据，并把它以特定的逻辑传给View。 通常，面向对象的MVC框架要求开发人员配置哪些类对应于上述三个类别中的每一个。然而，Grails比大多数框架更进一步遵循“约定优于配置”的开发方法。这意味着对于Grails中的许多Artefact类型（Controller，View等），你只需在项目的特定目录中创建一个文件，Grails将自动将其连接到你的应用程序中，而无需你进行任何其他配置。 处理domain到数据库表（以及其他持久存储）的映射是GORM（Grails Object Relational MapperGrails对象关系映射器）的工作。 GORM是Grails框架中的一个强大工具，甚至可以在Grails项目之外独立使用。它支持关系数据库（通过Hibernate）以及MongoDb，Neo4j，Redis和Cassandra数据源。有关更多信息，请参阅GORM文档。 当你构建一个MVC应用时，一般来说你要先从M入手——也就是domain model。在Grails中，你的domain将在grails-app/domain用Groovy的类定义。 所以我们不妨先从Domain入手。 4.1 构建Domain Class Domain class可以由Grails生成（在这种情况下，Grails将自动创建单元测试），或者你可以自己创建文件。 ./grailsw create-domain-class Vehicle | Created grails-app/domain/org/grails/guides/Vehicle.groovy | Created src/test/groovy/org/grails/guides/VehicleSpec.groovy 这将生成两个Groovy文件，一个是我们的Domain class，另一个是单元测试。让我们看看我们的Domain class是什么样的。 // grails-app/domain/org/grails/guides/Vehicle.groovy package org.grails.guides class Vehicle { static constraints = { } } 现在我们的domain class没有属性，也没有约束。这不是很有趣，但值得注意的是，这就是在我们的应用程序中连接persistent domain class所需的全部内容。默认情况下，Hibernate将用于配置数据源（默认情况下为内存中的H2数据库），并为grails-app/domain下的所有Groovy类创建表和关联。让我们为这个domain class添加一些属性： // grails-app/domain/org/grails/guides/Vehicle.groovy package org.grails.guides class Vehicle { String name // #1 String make String model static constraints = { // #2 name maxSize: 255 make inList: ['Ford', 'Chevrolet', 'Nissan'] model nullable: true } } 属性将用于在数据库中创建列（假设使用关系数据库） 约束用于在每个字段中强制执行有效数据 - Grails为常见场景提供了一组丰富的约束，你还可以定义自定义约束 有关如何使用域类和约束的内容，请参阅Grails文档 4.2 DB Console 如果你再次运行该应用程序(注意一定要重新启动你的app)，你应该看到与以前相同的页面。但是，你可以登录到数据库控制台并查看新的数据库表。 浏览到(http://localhost:8080/dbconsole)[http://localhost:8080/dbconsole]并登录。默认用户名是sa，没有密码。默认的JDBC URL是： jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE 你可以在/grails-app/conf/application.yml中查看JDBC url 登录到数据库控制台后，你应该会在左侧边栏中看到新的VEHICLES表。单击+图标展开表格 - 你应该看到列的列表，包括我们刚刚定义的三个字符串字段，名称，品牌和型号。 4.3 扩展Domain Model 相比你也能注意到，对于我们的Vehicle来说，它的make和model字段目前还是String类型——这是很不合理的。因为model与make都应该是相互关联的。（正如关系型数据库一样）所以让我们把Domain model扩展一下，变得更robust吧。 创建一下两个新的domain classes： $ ./grailsw create-domain-class Make | Created grails-app/domain/org/grails/guides/Make.groovy | Created src/test/groovy/org/grails/guides/Make.groovy $ ./grailsw create-domain-class Model | Created grails-app/domain/org/grails/guides/Model.groovy | Created src/test/groovy/org/grails/guides/Model.groovy 讲下列两个文件编辑为如下内容： // grails-app/domain/org/grails/guides/Make.groovy package org.grails.guides class Make { String name static constraints = { } String toString() { name } } // grails-app/domain/org/grails/guides/Model.groovy package org.grails.guides class Model { String name static belongsTo = [ make: Make ] static constraints = { } String toString() { name } } belongsTo属性是GORM用于确定域类之间关联的几个属性之一。其他包括hasMany和hasOne。有关更多信息，请参阅GORM文档。 你可以回想一下实体之间的关系（1:n,1:1,n:m） 现在，更新Vehicle.groovy以使用新的Make和Model类来代替原来的String。 // grails-app/domain/org/grails/guides/Vehicle.groovy package org.grails.guides @SuppressWarnings('GrailsDomainReservedSqlKeywordName') class Vehicle { Integer year String name Model model Make make static constraints = { year min: 1900 name maxSize: 255 } } Grails（通过GORM）现在将在我们的数据库中为我们的三个domain class创建三个表，并在表之间创建必要的关联。 再次运行应用程序(重启)并打开数据库控制台以查看新表。 4.4 Bootstrapping Data (初始化数据) 每个Grails项目都包含grails-app/init下的BootStrap.groovy文件。此文件可用于你希望在应用程序启动期间发生的任何自定义逻辑。该文件的一个很好的用途是在我们的数据库中预加载一些数据。让我们创建三个域类的几个实例。 编辑grails-app/init/org/grails/guides/BootStrap.groovy，如下文所示： // grails-app/init/org/grails/guides/BootStrap.groovy package org.grails.guides class BootStrap { def init = { servletContext -&amp;gt; def nissan = new Make(name: 'Nissan').save() def ford = new Make(name: 'Ford').save() def titan = new Model(name: 'Titan', make: nissan).save() def leaf = new Model(name: 'Leaf', make: nissan).save() def windstar = new Model(name: 'Windstar', make: ford).save() new Vehicle(name: 'Pickup', make: nissan, model: titan, year: 2012).save() new Vehicle(name: 'Economy', make: nissan, model: leaf, year: 2014).save() new Vehicle(name: 'Minivan', make: ford, model: windstar, year: 1990).save() } def destroy = { } } 现在重新启动应用程序，并浏览DBConsole，你应该能够展开这三个表并查看我们新创建的数据。 4.5 数据源（Datasources） 默认情况下，Grails配置in-memory内存中的H2数据库，每次重新启动应用程序时都会删除并重新创建。这对于本指南中的目的是足够的，但是，你可以通过配置自己的数据源轻松地将其更改为本地数据库实例。我们将以MySQL为例。 4.6 配置MySQL数据源 前提是你有MySQL数据库，不然译者比较建议你跳过这一段。 编辑build.gradle // build.gradle dependencies { //... runtime 'mysql:mysql-connector-java:5.1.40' 添加MySQL JDBC驱动程序作为依赖项 确保将依赖项添加到build.gradle文件的dependencies部分，而不是buildscript/dependencies部分。前者用于应用程序依赖项（在编译时，运行时或测试时需要），而构建脚本依赖项是作为Gradle构建过程（例如，管理静态资产）的一部分所需的那些依赖项。 编辑 application.yml # grails-app/conf/application.yml dataSource: pooled: true jmxExport: true driverClassName: com.mysql.jdbc.Driver # 1. dialect: org.hibernate.dialect.MySQL5InnoDBDialect username: sa password: testing environments: development: dataSource: dbCreate: update url: jdbc:mysql://127.0.0.1:3306/myapp # 2. 将driverClassName和dialect更改为MySQL设置 这假设你有一个名为myapp的数据库的本地MySQL实例 4.7 Grails Console 现在我们没有设置任何控制器或view来使用我们的domain class。我们很快就会到达那一步，但是现在，让我们启动Grails console，以便我们可以探索Grails和GORM提供的内容。 如果应用程序仍在运行，请使用[Ctrl + C]或（如果在交互模式下运行Grails stop-app命令）将其关闭。 启动Grails控制台： $ ./grailsw console Grails控制台应用程序将会启动。这个应用程序基于Groovy控制台，但具有额外的好处，即我们的整个Grails应用程序在后台启动并运行，因此我们可以访问我们的domain，甚至可以从控制台持久保存到数据库。 尝试从控制台使用我们的新domain class。这是一个简单的脚本，可以帮助你入门——再次参考GORM文档，了解有关查询，持久性，配置等的更多详细信息。 // docs/console.groovy import org.grails.guides.* def vehicles = Vehicle.list() println vehicles.size() def pickup = Vehicle.findByName(&quot;Pickup&quot;) println pickup.name println pickup.make.name println pickup.model.name def nissan = Make.findByName(&quot;Nissan&quot;) def nissans = Vehicle.findAllByMake(nissan) println nissans.size() 5 Controller 本节将重点介绍创建controller和定义操作的基础知识。 虽然不是“MVC”三角形的一部分，但Grails也提供对service的支持。在任何复杂的Grails应用程序中，将核心应用程序逻辑保留在service中被认为是最佳实践。我们稍后将在本指南中介绍它。 遵循约定优于配置原则，Grails将在grails-app/controllers/下将任何Groovy类配置为控制器，无需任何其他配置。你可以自己创建Groovy类，或使用create-controller命令生成控制器和相关的测试规范（test spec）。 $ ./grailsw create-controller org.grails.guides.Home | Created grails-app/controllers/org/grails/guides/HomeController.groovy | Created src/test/groovy/org/grails/guides/HomeControllerSpec.groovy 请注意，Grails会自动添加*Controller后缀。 我们来看看我们的新的Controller。 // grails-app/controllers/org/grails/guides/HomeController.groovy package org.grails.guides class HomeController { def index() { } } Grails创建了一个具有单个action的控制器。action是控制器中的公共方法，可以响应请求。 通常，控制器动作将接收请求，获得一些数据（可选地使用参数或请求的主体，如果存在），并将结果呈现给浏览器（例如，作为网页）。 控制器操作还可以重定向请求，转发，调用服务方法以及返回HTTP响应代码。有关控制器操作的更多信息，请参阅Grails文档。 我们尚未对此action中的逻辑有任何需求，但我们希望它能够呈现页面。我们将在view部分中更详细地查看GSP页面，但是现在，让我们为要显示的HomeController.index操作创建一个非常简单的GSP页面。 在grails-app/views/home目录下创建文件index.gsp。 &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&quot;layout&quot; content=&quot;main&quot;/&amp;gt; &amp;lt;title&amp;gt;Home Page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&quot;content&quot; role=&quot;main&quot;&amp;gt; &amp;lt;section class=&quot;row colset-2-its&quot;&amp;gt; &amp;lt;h1&amp;gt;Welcome to our Home Page!&amp;lt;/h1&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 再次运行该应用程序并浏览到http:localhost:8080/home。你应该看到你的新页面。 按照惯例，Grails会将控制器操作映射到grails-app/views/[controllername]目录中具有相同名称的视图。你可以覆盖它并指定特定视图（或完全呈现不同的内容）。 我们将在下一节中更详细地介绍视图和GSP，但是现在，你应该注意我们的index.gsp文件基本上是一个HTML页面，带有几个不常见的标记。你可以根据需要随意修改这个新的主页。 5.1 URL Mappings （映射） 现在我们有了新的“主页”页面，如果它是应用程序的登录页面而不是Grails默认页面会很好。为此，我们需要更改我们的UrlMappings.groovy文件。 Grails使用UrlMappings.groovy文件将请求路由到适当的Controller和action。它们可以像重定向到controller和/或action的URI字符串一样简单，也可以包含通配符和约束，并且变得非常复杂。 从Grails文档中了解有关URL映射的更多信息 我们来看看默认的URLMappings.groovy文件。 // grails-app/controllers/org/grails/guides/UrlMappings.groovy package org.grails.guides class UrlMappings { static mappings = { &quot;/$controller/$action?/$id?(.$format)?&quot;{ // 1. constraints { // apply constraints here } } &quot;/&quot;(view:&quot;/index&quot;) // 2. &quot;500&quot;(view:'/error') &quot;404&quot;(view:'/notFound') } } Grails默认URL映射-此规则使请求根据名称映射到controller和操作（以及可选的ID和/或格式）。所以home/index将映射到HomeController，名为index的action。 此URL映射将根URI（/）指向特定视图。 让我们改变/规则指向我们的新HomeController。编辑该行如下： // grails-app/controllers/org/grails/guides/UrlMappings.groovy package org.grails.guides class UrlMappings { static mappings = { //... &quot;/&quot;(controller:&quot;home&quot;) // 1. //... } } Change view: “/index” to controller: “home” 按照惯例，对没有操作名称的controller的请求将转到索引操作（如果存在）（如果不存在，将抛出错误）。如果需要，可以通过在controller中指定defaultAction属性来更改此行为： // grails-app/controllers/org/grails/guides/HomeController.groovy package org.grails.guides class HomeController { static defaultAction = &quot;homePage&quot; def homePage() { } // 1. } 不要进行此更改，这仅用于演示目的 现在你已将/规则更改为指向新的HomeController，如果你将应用程序和浏览器重新启动到http://localhost:8080，则应显示新的主页。 5.2 Scaffolding （脚手架） 我们希望有一些操作允许我们创建新的domain class实例并将它们保存到数据库中。此外，我们希望能够编辑现有实例甚至删除它们。通常所有这些功能都需要大量编码，但Grails为我们提供了scaffolding的来快速生成这些重复的代码。 在Grails文档中了解有关脚手架的更多信息。 5.3 Dynamic Scaffolding (动态脚手架) 现在我们有了一个主页，让我们创建控制器来管理我们之前创建的domain class。为每个domain class（Vehicle，Make和Model）创建3个新控制器。 $ ./grailsw create-controller Vehicle | Created grails-app/controllers/org/grails/guides/VehicleController.groovy | Created src/test/groovy/org/grails/guides/VehicleControllerSpec.groovy $ ./grailsw create-controller Make | Created grails-app/controllers/org/grails/guides/MakeController.groovy | Created src/test/groovy/org/grails/guides/MakeControllerSpec.groovy $ ./grailsw create-controller Model | Created grails-app/controllers/org/grails/guides/ModelController.groovy | Created src/test/groovy/org/grails/guides/ModelControllerSpec.groovy 要使用scaffolding，请编辑我们刚刚创建的三个控制器，并使用scaffolding属性替换默认索引操作，如下面的示例所示。 // grails-app/controllers/org/grails/guides/VehicleController.groovy package org.grails.guides class VehicleController { static scaffold = Vehicle } // grails-app/controllers/org/grails/guides/MakeControler.groovy package org.grails.guides class MakeControler { static scaffold = Make } // grails-app/controllers/org/grails/guides/ModelController.groovy package org.grails.guides class ModelController { static scaffold = Model } 通过设置scaffold属性，Grails现在将为各个域类生成所有必需的CRUD（创建，读取，更新，删除）操作。它还将使用我们的域属性和关联(domain properties and associations)动态生成包含列表，创建，显示和编辑页面的视图。在一开始搭建应用程序时，这可以为你提供一个极大的便利。 重启应用程序，并浏览到http://localhost:8080/vehicle - 你应该看到我们添加到BootStrap的Vehicle实例列表。尝试新视图并创建，查看，编辑和删除某些实例。你也可以使用Model和Make控制器执行相同的操作。 5.4 Static Scaffolding 动态脚手架功能强大，多数时候会提供你需要的所有功能（特别是对于数据访问比演示更重要的管理站点）。但很可能你会觉得需要自定义生成的视图和控制器，以改变其外观或添加自定义逻辑和功能。Grails预见到了这种需求，并提供了一组生成命令（generate commands），可以生成你刚刚看到的控制器 和/或 视图，允许你修改它们以满足你的需求。 生成视图（并继续使用动态脚手架）： $ ./grailsw generate-views Vehicle 你要生成的部分是静态的scaffold，没有生成会继续使用动态scaffold 要生成控制器（并继续使用动态GSP视图）： $ ./grailsw generate-controller Vehicle 对于视图和控制器（绕过所有动态生成）： $ ./grailsw generate-all Vehicle 生成的控制器将放在grails-app/controller下，生成的视图将放在grails-app/views/vehicle下。 要覆盖现有文件，请使用-force标志和generate-*命令： ./ grailsw generate-all com.example.Vehicle -force 让我们为Vehicle生成控制器和视图，并查看生成的控制器。 $ ./grailsw generate-all Vehicle -force 在grails-app/controllers/org/grails/guides/上打开VehicleController.groovy文件。 注意由于版本问题，下述代码可能会与你的实际代码有细微区别，不过这并无大碍，让我们抓大放小。 // grails-app/controllers/org/grails/guides/VehicleController.groovy import static org.springframework.http.HttpStatus.NOT_FOUND import static org.springframework.http.HttpStatus.OK import static org.springframework.http.HttpStatus.CREATED import org.grails.guides.Vehicle import grails.transaction.Transactional @SuppressWarnings(['LineLength']) @Transactional(readOnly = true) // 1. class VehicleController { static namespace = 'scaffolding' static allowedMethods = [save: 'POST', update: 'PUT', delete: 'DELETE'] def index(Integer max) { params.max = Math.min(max ?: 10, 100) // 2. respond Vehicle.list(params), model:[vehicleCount: Vehicle.count()] // 3. } def show(Vehicle vehicle) { respond vehicle // 3. } @SuppressWarnings(['FactoryMethodName', 'GrailsMassAssignment']) def create() { respond new Vehicle(params) // 3. } @Transactional // 1. def save(Vehicle vehicle) { if (vehicle == null) { transactionStatus.setRollbackOnly() notFound() return } if (vehicle.hasErrors()) { transactionStatus.setRollbackOnly() respond vehicle.errors, view:'create' // 3. return } vehicle.save flush:true request.withFormat { // 4. form multipartForm { // 5. flash.message = message(code: 'default.created.message', args: [message(code: 'vehicle.label', default: 'Vehicle'), vehicle.id]) redirect vehicle } '*' { respond vehicle, [status: CREATED] } // 3. } } def edit(Vehicle vehicle) { respond vehicle // 3. } @Transactional // 1. def update(Vehicle vehicle) { if (vehicle == null) { transactionStatus.setRollbackOnly() notFound() return } if (vehicle.hasErrors()) { transactionStatus.setRollbackOnly() respond vehicle.errors, view:'edit' // 3. return } vehicle.save flush:true request.withFormat { form multipartForm { // 5. flash.message = message(code: 'default.updated.message', args: [message(code: 'vehicle.label', default: 'Vehicle'), vehicle.id]) redirect vehicle // 6. } '*' { respond vehicle, [status: OK] } // 3. } } @Transactional // 1. def delete(Vehicle vehicle) { if (vehicle == null) { transactionStatus.setRollbackOnly() notFound() return } vehicle.delete flush:true request.withFormat { form multipartForm { // 5. flash.message = message(code: 'default.deleted.message', args: [message(code: 'vehicle.label', default: 'Vehicle'), vehicle.id]) redirect action: 'index', method: 'GET' // 6. } '*' { render status: NO_CONTENT } // 7. } } protected void notFound() { request.withFormat { form multipartForm { // 5. flash.message = message(code: 'default.not.found.message', args: [message(code: 'vehicle.label', default: 'Vehicle'), params.id]) redirect action: 'index', method: 'GET' //6. @Transactional 注解配置了控制器或方法的事务行为。事务用于管理持久性和应该一起完成的其他复杂操作（如果任何一个步骤失败，可能会回滚）。有关事务的更多信息，请参阅Grails文档 params对象可供所有控制器使用，并包含请求中任何URL参数的映射。你可以按名称引用任何参数来检索值：params.myCustomParameter将匹配此URL参数：[url]?myCustomParameter=hello。有关更多详细信息，请参阅Grails文档。 respond方法把对象返回给请求者，使用content negotiation（内容协商）来选择正确的类型（例如，请求的Accept头可能指定JSON或XML）。respond也可以接受参数映射，例如model（定义数据在页面上加载的方式）。有关如何使用该respond方法的更多信息，请参阅Grails文档。 request在所有控制器上都可用，它是Servlet API的HttpServletRequest类的一个实例。你可以访问请求标头，在请求范围中存储属性，并使用此对象获取有关请求者的信息。有关更多信息，请参阅Grails文档。 flash是一个映射，用于存储会话中的对象以用于下一个请求，在下一个请求完成后自动清除它们。这对于传递你希望下一个请求访问的错误消息或其他数据非常有用。有关更多信息，请参阅Grails文档flash。 redirect方法很简单 - 它允许操作将请求重定向到另一个操作，控制器或URI。你还可以使用重定向传递参数。有关更多信息，请参阅Grails文档redirect。 render方法是一个不太复杂的版本respond——它不执行内容协商，因此你必须准确指定要呈现的内容。你可以呈现纯文本，视图或模板，HTTP响应代码或具有String表示形式的任何对象。请参阅Grails文档。 这一部分有很多代码！ 生成和修改脚手架控制器是一个很好的学习练习，因此可以随意尝试和修改此代码——你始终可以恢复到completed本指南的项目中的版本。（这里指的是英文版的github中的项目） 5.5 Render a response 让我们修改HomeController，使我们能在主页上呈现一些自定义内容。编辑grails-app/controllers/org/grails/guides/HomeController.groovy。 // grails-app/controllers/org/grails/guides/HomeController.groovy package org.grails.guides class HomeController { def index() { respond([name: session.name ?: 'User', vehicleTotal: Vehicle.count()]) // 1. } def updateName(String name) { session.name = name // 2. flash.message = &quot;Name has been updated&quot; // 3. redirect action: 'index' // 4. } } 我们正在调用respond方法向请求者渲染出Groovy内容映射render a Groovy map of content to the requestor，其中包含 1.会话中的属性name（如果不存在会话值，则默认为“User”）以及 2. GORM的count方法返回的，当前Vehicle的实例总数。 session是Servlet API的HttpSession类的一个实例，并且在每个控制器中都可用。我们可以在会话中检索和存储属性——在这种情况下，我们将在会话中存储String类型的属性name。有关更多信息，请参阅Grails文档。 我们使用flash语句来设置在下一个请求时显示的消息 我们没有在此操作中显示任何特定内容的需求，因此我们向index操作发出redirect重定向（请注意，只要存在至少一个参数，Groovy方法中的括号是可选的）。 我们更新了我们的index操作以向页面呈现一些自定义内容，并且我们创建了一个新操作updateName，该操作接受一个String参数并将其保存到session，为了以后的检索使用。但是，我们需要将视图更新为1.显示新可用的内容，以及2.提供一些调用updateName和设置session属性的方法。 编辑grails-app/views/home/index.gsp： &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&quot;layout&quot; content=&quot;main&quot;/&amp;gt; &amp;lt;title&amp;gt;Home Page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&quot;content&quot; role=&quot;main&quot;&amp;gt; &amp;lt;section class=&quot;row colset-2-its&quot;&amp;gt; &amp;lt;h1&amp;gt;Welcome ${name}!&amp;lt;/h1&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;h4&amp;gt;${flash.message}&amp;lt;/h4&amp;gt; &amp;lt;!-- 2. --&amp;gt; &amp;lt;p&amp;gt;There are ${vehicleTotal} vehicles in the database.&amp;lt;/p&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;form action=&quot;/home/updateName&quot; method=&quot;post&quot; style=&quot;margin: 0 auto; width:320px&quot;&amp;gt; &amp;lt;!-- 3. --&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;&quot; id=&quot;name&quot;&amp;gt; &amp;lt;input type=&quot;submit&quot; name=&quot;Update name&quot; value=&quot;Update name&quot; id=&quot;Update name&quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;&amp;lt;html&amp;gt; 我们可以使用Groovy String Expressions ${name} ${vehicleTotal}在GSP页面中按名称引用我们的“模型”中的任何值。 在这里，我们访问我们的flash.message属性——如果它为null，则此处不会呈现任何内容。 这是一个纯HTML表单，它将名称文本字段提交给我们刚刚创建的updateName操作。 运行应用程序，你应该在 标题中看到我们的新消息：&quot;Welcome User!&quot;，以及数据库中当前的Vehicle实例总数。 尝试在表单中输入你自己的名称并提交——你应该看到页面重新加载，你自己的名称将替换”User”,刷新页面几次。因为我们将名称存储在会话中，所以只要会话有效，它就会一直存在。 5.6 Content Negotiation 请记住，我们使用了respond方法，而不是使用更简单的render方法将”model”发送到页面。这意味着除了HTML页面之外，我们可以使用其他格式来获取模型，例如JSON或XML。 在终端中运行以下命令（在应用程序运行时） $ curl -i -H &quot;Accept: application/json&quot; &quot;http://localhost:8080/home/index&quot; HTTP/1.1 200 X-Application-Context: application:development Set-Cookie: JSESSIONID=008B45AAA1A820CE5C9FDC2741D345F3;path=/;HttpOnly Content-Type: application/json;charset=UTF-8 Transfer-Encoding: chunked Date: Wed, 11 Jan 2017 04:06:57 GMT {&quot;name&quot;:&quot;User&quot;,&quot;vehicleTotal&quot;:3} 我们使用curl来调用我们的索引操作，但是我们已经将Accept标头更改为application/json。现在我们在JSON中收到相同的数据，而不是HTML页面。 由于Grails的默认URL映射（如下所示），你也可以在浏览器中请求不同的内容类型： // grails-app/controllers/org/grails/guides/UrlMappings.groovy &quot;/$controller/$action?/$id?(.$format)?&quot; { constraints { // apply constraints here } } 注意(.$format)?映射中的令牌。这将匹配我们的URL上的后缀，例如.json或.xml。在浏览器中测试一下。 浏览http://localhost:8080/home/index.json。你应该看到我们使用curl检索的相同JSON主体。 尝试将.json更改为.xml。你应该看到模型的XML表示。content negotiation会让你的控制器变得非常通用，并通过相同的操作将适当的数据返回给不同的客户端。 6 Views 视图是MVC模式的第三个组成部分。视图负责向用户（可能是浏览器页面，API端点或其他类型的消费者）呈现数据。在许多应用程序中，视图是设计为在浏览器中加载的HTML页面。但是，根据请求视图的客户端类型，“视图”是XML或JSON文档是完全合理的。 Grails的主要视图技术是Groovy Server Pages。它遵循JSP和ASP的许多约定，但自然它基于Groovy语言。 GSP页面本质上是HTML文档，但它们支持许多特殊标记（通常以g:)作为前缀，以允许对你的视图进行编程控制。你甚至可以在GSP页面中编写任意Groovy代码，但强烈建议不要这样做 - 理想情况下，GSP页面应该只包含与视图相关的逻辑和内容;在呈现视图之前，控制器（或服务）中应该已经将任何类型的数据操作或处理完成。 你已经在本指南中使用了GSP视图，但让我们快速介绍一下基础知识。 Layouts 应用程序中的GSP视图通常需要共享一些通用结构，也许还需要一些共享资源，如JavaScript文件。 Grails使用SiteMesh模板技术来支持“布局”的概念，“布局”本质上是GSP页面可以“继承”的GSP模板文件。 按照惯例，布局位于grails-app/views/layouts下。 Grails在默认项目中包含一个main.gsp模板，这是Grails脚手架使用的模板，以及默认主页。我们也在使用它。要使用GSP布局，只需使用&amp;lt;meta name=&quot;layout&quot;&amp;gt;标签指定布局的名称： &amp;lt;!-- grails-app/views/layouts/main.gsp --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&quot;layout&quot; content=&quot;main&quot;/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;!-- ... --&amp;gt; 你也可以创建自己的布局。让我们为我们的主页创建一个新的布局。 $ vim grails-app/views/layouts/public.gsp 编辑新布局。我们将复制现有的main.gsp作为开始，但我们将添加自定义徽标图像并删除我们页面上不需要的一些布局代码。 &amp;lt;!-- grails-app/views/layouts/public.gsp --&amp;gt; &amp;lt;!doctype html&amp;gt; &amp;lt;html lang=&quot;en&quot; class=&quot;no-js&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&amp;gt; &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;/&amp;gt; &amp;lt;title&amp;gt; &amp;lt;g:layoutTitle default=&quot;Auto Catalog&quot;/&amp;gt; &amp;lt;/title&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;/&amp;gt; &amp;lt;asset:stylesheet src=&quot;application.css&quot;/&amp;gt; &amp;lt;g:layoutHead/&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&quot;navbar navbar-default navbar-static-top&quot; role=&quot;navigation&quot;&amp;gt; &amp;lt;div class=&quot;container&quot;&amp;gt; &amp;lt;div class=&quot;navbar-header&quot;&amp;gt; &amp;lt;a class=&quot;navbar-brand&quot; href=&quot;/#&quot;&amp;gt; &amp;lt;i class=&quot;fa grails-icon&quot;&amp;gt; &amp;lt;asset:image src=&quot;logo.png&quot;/&amp;gt; &amp;lt;/i&amp;gt; Auto Catalog &amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&quot;navbar-collapse collapse&quot; aria-expanded=&quot;false&quot; style=&quot;height: 0.8px;&quot;&amp;gt; &amp;lt;ul class=&quot;nav navbar-nav navbar-right&quot;&amp;gt; &amp;lt;g:pageProperty name=&quot;page.nav&quot; /&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;g:layoutBody/&amp;gt; &amp;lt;div class=&quot;footer&quot; role=&quot;contentinfo&quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 此布局的关键点是&amp;lt;g：layoutbody&amp;gt;和&amp;lt;g：layouthead&amp;gt;标记。 SiteMesh将这些标记替换为使用该布局的任何GSP页面的&amp;lt;head&amp;gt;和&amp;lt;body&amp;gt;部分。 你可以随意提供自己的logo.png图像，或使用已完成项目中的图像（或通过此链接下载）。将图像放在grails-app/assets/images/目录中，布局应该呈现它而不是Grails徽标。 不要担心新布局中的&amp;lt;asset&amp;gt;标签——我们将很快介绍这些标签。 现在编辑home/index.gsp视图以使用新的公共布局。 &amp;lt;!-- home/index.gsp --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&quot;layout&quot; content=&quot;public&quot;/&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;title&amp;gt;Home Page&amp;lt;/title&amp;gt; 把&quot;main&quot;换为&quot;public&quot; 刷新页面（或重新启动应用程序），你应该可以立即看到新的布局。如果你愿意，可以随意进一步修改public.gsp布局。 6.1 Views Resolution Grails是如何知道要要选择哪个视图去渲染呢？按照惯例，Grails在grails-app/views目录下查找视图。它将尝试通过将控制器名称与views目录下的目录进行匹配来解析对控制器操作的视图。例如，HomeController将解析为grails-app/views/home。然后，Grails会将操作映射到具有相同名称的GSP页面。例如，索引将解析为index.gsp。 你还可以使用render方法从控制器操作渲染特定视图（覆盖Grails的约定）： class SomeController { def someAction() { render view: 'anotherView' } } 这将尝试解析为grails-app/views/some/下的anotherView.gsp页面。如果你想要解析不在控制器自己的视图目录下的视图，请使用/来指定grails-app/views中的绝对路径： class SomeController { def someAction() { render view: '/another/view' } } 这将解析为grails-app/views/another/下的view.gsp。 6.2 GSP GSP页面可以访问丰富的tags标签集。我们已经看到了一些action。你可以从Grails文档中获取有关可用GSP标记（包括如何定义自定义标记）的更多详细信息。 让我们在index.gsp页面上添加一些GSPtags。 编辑grails-app/views/home/index.gsp &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;%@ page import=&quot;Vehicle&quot; %&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta name=&quot;layout&quot; content=&quot;public&quot;/&amp;gt; &amp;lt;title&amp;gt;Home Page&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&quot;content&quot; role=&quot;main&quot;&amp;gt; &amp;lt;section class=&quot;row colset-2-its&quot;&amp;gt; &amp;lt;h1&amp;gt;Welcome ${name}!&amp;lt;/h1&amp;gt; &amp;lt;g:if test=&quot;${flash.message}&quot;&amp;gt; &amp;lt;!-- 1.--&amp;gt; &amp;lt;div class=&quot;message&quot; role=&quot;status&quot;&amp;gt;${flash.message}&amp;lt;/div&amp;gt; &amp;lt;/g:if&amp;gt; &amp;lt;p&amp;gt;There are ${vehicleTotal} vehicles in the database.&amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;g:each in=&quot;${Vehicle.list()}&quot; var=&quot;vehicle&quot;&amp;gt; &amp;lt;li&amp;gt; &amp;lt;g:link controller=&quot;vehicle&quot; action=&quot;show&quot; id=&quot;${vehicle.id}&quot;&amp;gt; ${vehicle.name} - ${vehicle.year} ${vehicle.make.name} ${vehicle.model.name} &amp;lt;/g:link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/g:each&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;g:form action=&quot;updateName&quot; style=&quot;margin: 0 auto; width:320px&quot;&amp;gt; &amp;lt;!-- 2. --&amp;gt; &amp;lt;g:textField name=&quot;name&quot; value=&quot;&quot; /&amp;gt; &amp;lt;g:submitButton name=&quot;Update name&quot; /&amp;gt; &amp;lt;/g:form&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 我们使用&amp;lt;g:if&amp;gt;标签测试是否有message，然后渲染message（使用一些自定义样式），而不是一味地渲染flash.message而不管它是否存在。 将纯HTML&amp;lt;form&amp;gt;标记替换为其GSP等效项。 让我们仔细看看&amp;lt;g:if&amp;gt;。 &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;g:if test=&quot;${isThisTrue}&quot;&amp;gt; Some content &amp;lt;/g:if&amp;gt; GSP tag可以接受attributes(属性)，例如本例中的测试。不同的标签需要不同类型的属性，但通常你最终会像本示例中那样传递Groovy Expression。将评估${和}之间的任何Groovy代码（在服务器上），结果将在呈现的页面上替换。 你可以在GSP页面的任何位置使用Groovy Expressions，而不仅仅是在标签中。可以参考index.gsp页面中的${flash.message}。 其他标记属性可能接受普通字符串或数字。例如，&amp;lt;g:form action=&quot;“updateName”&quot;&amp;gt; GSP tag也可以选择包括一个主体。在&amp;lt;g:if&amp;gt;的情况下，只有在test表达式求值为true时才会呈现正文（遵循Groovy Truth约定）。其他GSP标记（如&amp;lt;g:form&amp;gt;）只是在生成的HTML输出中包含正文。 6.3 GSP Tags Iteration 6.3.1 Iteration 还有用于迭代的GSP标签——非常有用的是&amp;lt;g:each&amp;gt;。我们来试试吧： &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;%@ page import=&quot;Vehicle&quot; %&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;p&amp;gt;There are ${vehicleTotal} vehicles in the database.&amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;g:each in=&quot;${Vehicle.list()}&quot; var=&quot;vehicle&quot;&amp;gt; &amp;lt;!-- 2. --&amp;gt; &amp;lt;li&amp;gt; &amp;lt;! -- ... --&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/g:each&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;g:each&amp;gt;标记遍历由in属性提供的对象集合。 var设置集合中每个对象的名称。 Grails将遍历集合（在本例中为Vehicle.list()返回的Vehicle列表），并为每个项目呈现&amp;lt;g:each&amp;gt;标记的主体。 这是一个JSP样式的表达式，允许执行任意Groovy代码（而不会渲染结果）。我们在这里使用它来导入我们的Vehicle类。然而这种方式是非常令人沮丧的——我们很快就会解释原因。 不好的做法，直接从视图访问domain class 这种代码是一个坏主意 - 我们直接从我们的视图访问我们的domain class（Vehicle），它紧密地耦合应用程序的两个独立部分，并且通常导致非常混乱的代码。完成此功能的更好方法是在HomeController.index操作中获取Vehicle列表，并将列表添加到我们的model object（the one being passed to respond(传递给响应的对象)）。然后我们可以像访问name和vehicleTotal那样引用列表。继续更改控制器和视图以使用这种更好的方法 - 如果你需要帮助，已完成的项目已经进行了此更改。 6.4 GSP Tags Links 我们来看一个更常见的GSP标记：&amp;lt;g:link&amp;gt;s &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;li&amp;gt; &amp;lt;g:link controller=&quot;vehicle&quot; action=&quot;show&quot; id=&quot;${vehicle.id}&quot;&amp;gt; ${vehicle.name} - ${vehicle.year} ${vehicle.make.name} ${vehicle.model.name} &amp;lt;/g:link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;g:link&amp;gt;呈现HTML &amp;lt;a&amp;gt;标记，但它的优点在于它允许你按照Grails约定指定链接目标，例如本示例（使用controller，action和id属性）。 &amp;lt;g:link&amp;gt;也非常智能，可以跟踪我们的URL映射，因此如果我们更改vehicle/show的URL映射，&amp;lt;g:link&amp;gt;标记仍将呈现正确的URL。 &amp;lt;g:link&amp;gt;支持更多属性 - 有关详细信息，请参阅Grails文档。 6.5 Asset Pipeline 你可能已经注意到我们的GSP页面中有一些标签。这些标签由`Asset Pipeline`插件提供，这是Grails用于管理`static assets`静态资源（图像，CSS，JavaScript文件等）的默认工具。 `Asset Pipeline`插件提供了一组自定义GSP标记，但与我们一直在探索的标记不同，它使用`asset`前缀（或命名空间）。 最常见的&amp;lt;asset&amp;gt;标签如下： &amp;lt;asset:javascript src=&quot;myscript.js&quot; /&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;asset:image src=&quot;myimage.png&quot; /&amp;gt; &amp;lt;!-- 2. --&amp;gt; &amp;lt;asset:stylesheet src=&quot;mystyles.css&quot; /&amp;gt; &amp;lt;!-- 3. --&amp;gt; 此标记从grails-app/assets/javascripts加载JavaScript文件 此标记从grails-app/assets/images加载图像 此标记从grails-app/assets/stylesheets加载CSS文件 正如你所看到的，Asset Pipeline遵循约定优于配置方法，遵循Grails的先例。但是，Asset Pipeline是一个非常强大的框架，包含一个丰富的插件生态系统 - 你可以找到插件来渲染LESS和SASS文件，CoffeeScript，Ember，Angular，JSX（React）等等。 Asset Pipeline还支持缩小和压缩你的资源等等。 访问asset-pipeline.com以获取有关使用Asset Pipeline的更多信息，包括可用插件的目录。 6.6 Add Javascript Asset 让我们使用Asset Pipeline插件将jQuery添加到我们的页面。 Grails默认包含jQuery。本指南中使用的Grails版本默认包含jQuery 2.2.0： _grails-app/assets/javascripts/jquery-2.2.0.min.js_ 但是让我们下载最新版本。从https://code.jquery.com/jquery-3.1.1.js 下载jQuery 将jquery-3.1.1.js保存到grails-app/assets/javascripts。 编辑grails-app/views/home/index.gsp，在head块中添加以下代码段。 &amp;lt;!-- grails-app/views/home/index.gsp --&amp;gt; &amp;lt;asset:javascript src=&quot;jquery-3.1.1.js&quot; /&amp;gt; &amp;lt;script type=&quot;text/javascript&quot;&amp;gt; $( document ).ready(function() { console.log( &quot;jQuery 3.1.1 loaded!&quot; ); }); &amp;lt;/script&amp;gt; 刷新页面，然后打开浏览器的开发人员控制台。你应该能看到字符串jQuery 3.1.1 loaded!在控制台日志中。 7 Services Grails提供了一个“service layer服务层”，它们是封装业务逻辑的类，并且是有线的（使用dependency injection 依赖注入）连接到应用程序上下文中，因此任何控制器都可以注入和使用它们。服务是大多数应用逻辑的首选工具，而不是控制器。 如果这看起来令人困惑，请按照这种方式考虑：控制器旨在响应请求并返回响应。服务可以在许多控制器（以及域类和其他服务）中重用。服务更加通用，可以帮助你保持控制器简洁，防止重复业务逻辑。对服务方法编写单元测试通常比对控制器操作更容易。 控制器用于“Web逻辑”，service用于“业务逻辑”。 按照惯例，Grails会将grails-app/services目录中的任何Groovy类配置为服务。服务将在Grails应用程序上下文中“连接”为Spring bean，这意味着你可以通过任何其他Spring bean（包括控制器和域类）的名称简单地引用它们。 让我们添加一个功能，根据品牌，型号和年份生成Vehicle的估算值。我们将这个逻辑放在一个服务中，并从我们的应用程序代码中调用它。 使用create-service命令创建新服务 $ ./grailsw create-service ValueEstimateService | Created grails-app/services/org/grails/guides/ValueEstimateService.groovy | Created src/test/groovy/org/grails/guides/ValueEstimateServiceSpec.groovy 编辑grails-app/services/org/grails/guides/ValueEstimateService.groovy // grails-app/services/org/grails/guides/ValueEstimateService.groovy package org.grails.guides import grails.transaction.Transactional @Transactional class ValueEstimateService { def serviceMethod() { } } Grails提供了一个serviceMethod作为示例。删除它并将其替换为以下内容： // grails-app/services/org/grails/guides/ValueEstimateService.groovy package org.grails.guides import grails.transaction.Transactional @Transactional class ValueEstimateService { def getEstimate(Vehicle vehicle) { log.info 'Estimating vehicle value...' //TODO: Call third-party valuation API Math.round (vehicle.name.size() + vehicle.model.name.size() * vehicle.year) * 2 } } 显然，这种估算车辆价值的方法非常人为！实际上，你可能会调用第三方Web服务来获取评估，或者可能针对你自己的数据库运行查询。但是，此示例的要点是显示可以放在服务中的“业务逻辑”，而不是在控制器或视图中计算。 现在，让我们使用我们的新服务。 编辑grails-app/controllers/org/grails/guides/VehicleController.groovy（我们之前生成的脚手架控制器），并添加如下所示的属性： // grails-app/controllers/org/grails/guides/VehicleController.groovy import static org.springframework.http.HttpStatus.CREATED import org.grails.guides.Vehicle import grails.transaction.Transactional @SuppressWarnings('LineLength') @Transactional(readOnly = true) class VehicleController { static allowedMethods = [save: 'POST', update: 'PUT', delete: 'DELETE'] def valueEstimateService // 1. ... } 通过简单地在控制器中定义一个与我们的服务类同名的属性，Grails将为我们注入对服务的引用。 现在（仍在编辑VehicleController.groovy），修改show动作，如下所示： // grails-app/controllers/org/grails/guides/VehicleController.groovy def show(Vehicle vehicle) { respond vehicle, model: [estimatedValue: valueEstimateService.getEstimate(vehicle)] } 我们在model中添加了新属性，名为estimatedValue。这个属性的值是调用我们的服务方法getEstimate的结果，我们将传递我们要渲染的车辆属性。 现在，在显示页面上，我们可以访问estimatedValue属性并在页面上显示它。编辑grails-app/views/vehicle/show.gsp，如下所示： &amp;lt;!-- grails-app/views/vehicle/show.gsp --&amp;gt; &amp;lt;div id=&quot;show-vehicle&quot; class=&quot;content scaffold-show&quot; role=&quot;main&quot;&amp;gt; &amp;lt;h1&amp;gt;&amp;lt;g:message code=&quot;default.show.label&quot; args=&quot;[entityName]&quot; /&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;h1&amp;gt;Estimated Value: &amp;lt;g:formatNumber number=&quot;${estimatedValue}&quot; type=&quot;currency&quot; currencyCode=&quot;USD&quot; /&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;!-- 1. --&amp;gt; &amp;lt;g:formatnumber&amp;gt;是另一个GSP标记，它为渲染数字提供了许多有用的选项，包括货币和小数精度。有关更多信息，请参阅Grails文档。 重新启动应用程序并浏览到车辆的显示页面，例如http://localhost:8080/vehicle/show/1。你应该在页面上看到“估计值” 8 Testing your App 测试是Web应用程序开发的重要部分。 Grails为三种类型的测试提供支持：单元测试，集成测试和功能测试。 单元测试通常是最简单的一种，专注于特定的代码而不依赖于应用程序的其他部分。 集成测试要求Grails环境启动并运行，并用于测试依赖于数据库或网络资源的功能。 功能测试要求应用程序运行，并且旨在通过对其发出HTTP请求，几乎以用户的身份运行应用程序。这些往往是最复杂的测试。 Grails使用的测试框架是Spock。 Spock提供了一种基于Groovy语言编写测试用例的富有表现力的语法，因此非常适合Grails。它包括一个JUnit runner，这意味着IDE支持是有效的通用（任何可以运行JUnit测试的IDE都可以运行Spock测试）。 Spock是一个丰富的框架（甚至在Grails应用程序之外），如果你还没有，那么值得你花时间去掌握它。查看有关Spock简介的大量文档。 Grails测试（按照惯例）存储在src/test/groovy目录（单元测试）和src/integration-test/groovy目录（集成/功能测试）中。 你可以使用test-app命令运行Grails测试： $ ./grailsw test-app 如果只想运行单元测试或集成/功能测试，可以传入命令行标志来选择其中一个。 $ ./grailsw test-app -unit $ ./grailsw test-app -integration 你还可以通过将测试类作为参数传递来运行特定测试： $ ./grailsw test-app org.grails.guides.MyTestSpec 编写测试是一个非常广泛的主题，值得用专门的时间去了解。在实践中，最简单（通常是最有用的）测试是单元测试，所以让我们编写一个简单的单元测试来练习我们的ValueEstimateService。 Grails自动为使用create-service命令创建的服务创建测试规范。打开src/test/groovy/org/grails/guides/ValueEstimateServiceSpec。 // src/test/groovy/org/grails/guides/ValueEstimateServiceSpec package org.grails.guides import grails.testing.gorm.DataTest import grails.testing.services.ServiceUnitTest import spock.lang.Specification class ValueEstimateServiceSpec extends Specification implements ServiceUnitTest&amp;lt;ValueEstimateService&amp;gt;, DataTest { def setup() { } def cleanup() { } void &quot;test something&quot;() { expect:&quot;fix me&quot; true == false } } 目前我们的测试规范有一个测试，&quot;test something&quot;，断言true == false。 Grails有助于你通过在测试失败的情况下解决问题来做正确的事情。 尝试运行测试，只是为了确认它必定失败： $ /grailsw test-app org.grails.guides.ValueEstimateServiceSpec ... &amp;gt; There were failing tests. See the report at: file:///Users/dev/projects/creating-your-first-grails-app/complete/build/reports/tests/test/index.html BUILD FAILED Total time: 6.353 secs | Tests FAILED Test execution failed 现在我们已经确认我们的测试失败了，让我们编辑这个测试用例来检验我们的getEstimate方法。编辑src/test/groovy/org/grails/guides/ValueEstimateServiceSpec。 // src/test/groovy/org/grails/guides/ValueEstimateServiceSpec.groovy package org.grails.guides import grails.testing.gorm.DataTest import grails.testing.services.ServiceUnitTest import spock.lang.Specification class ValueEstimateServiceSpec extends Specification implements ServiceUnitTest&amp;lt;ValueEstimateService&amp;gt;, DataTest { void setupSpec() { // 1. mockDomain Make mockDomain Model mockDomain Vehicle } void testEstimateRetrieval() { given: 'a vehicle' def make = new Make(name: 'Test') def model = new Model(name: 'Test', make: make) def vehicle = new Vehicle(year: 2000, make: make, model: model, name: 'Test Vehicle') when: 'service is called' def estimate = service.getEstimate(vehicle) then: 'a non-zero result is returned' estimate &amp;gt; 0 and: 'estimate is not too large' estimate &amp;lt; 1000000 } } 使用Grails 3.3中更新的测试框架模拟多个对象时，我们现在在安装过程中执行模拟，不再需要@Mock注释。 我们在这个测试中保持了非常简单的事情，因为我们没有非常复杂的逻辑用来测试，但是你也可以专注于Spock测试用例的基本公式。 Spock提供了一组关键字，允许你以人类可读的形式编写测试。 given 表示setup语句 —— 你可以在此处设置完成测试所需的任何对象或变量。 when 和 then 是Spock中最常见的“一对儿”之一（另一个，这里没有使用，是expect/where —— 它们定义了一个声明和一个预期的结果。 and继续当前的then语句，但它允许你指定你对多个断言的期望。请注意，所有这些块都接受（可选）字符串描述，这使你的测试更具可读性。例如，when: &quot;this method is called&quot;, then: &quot;expect this result&quot;。 继续并重新运行此测试 - 如果一切顺利，它应该通过测试，并伴随一个小旗子。 $ ./grailsw test-app org.grails.guides.ValueEstimateServiceSpec ... BUILD SUCCESSFUL | Tests PASSED 9 Deploying your App 开发Grails应用程序的最后一步是将完成的项目构建为可部署的包。通常，Java Web应用程序被部署为WAR文件，而Grails使用war命令可以轻松实现： $ ./grailsw war ... BUILD SUCCESSFUL | Built application to build/libs using environment: production 我们没有在本指南中涉及configuration的相关主题（虽然我们对配置文件进行了一些编辑），但是值得一提的是Grails支持环境概念，例如“开发”，“测试”和“生产”。每个环境都可以拥有自己的配置属性和值，因此你可以在开发和生产系统之间进行不同的设置。默认情况下，war命令使用“生产”环境 - 你可以使用-Dgrails.env标志覆盖它，如下所示： $ ./grailsw war -Dgrails.env=development ... BUILD SUCCESSFUL | Built application to build/libs using environment: development 一旦我们获得了WAR文件，我们就可以将它部署在任何JEE容器中，例如Tomcat。 恭喜！你已经构建了第一个Grails应用程序。 **</summary></entry><entry><title type="html">公开课学习</title><link href="http://localhost:4000/2019/03/19/open_courses.html" rel="alternate" type="text/html" title="公开课学习" /><published>2019-03-19T11:14:48+08:00</published><updated>2019-03-19T11:14:48+08:00</updated><id>http://localhost:4000/2019/03/19/open_courses</id><content type="html" xml:base="http://localhost:4000/2019/03/19/open_courses.html">&lt;p&gt;这篇文章记录自己对于公开课的学习和一些小收获。&lt;/p&gt;

&lt;h2 id=&quot;聆听音乐&quot;&gt;《聆听音乐》&lt;/h2&gt;

&lt;h2 id=&quot;programming-language&quot;&gt;《Programming Language》&lt;/h2&gt;

&lt;p&gt;即可以作为国内传统科班计算机教育出身——也就是以 C 入门——的同学的进阶课程，也可以作为编程新手来了解程序语言本身魅力的入门课程。&lt;/p&gt;

&lt;p&gt;函数式编程、类型系统、闭包、子类型与泛型、静态与动态等等等概念在这里都有所涉及。&lt;/p&gt;

&lt;h2 id=&quot;machine-learning&quot;&gt;Machine Learning&lt;/h2&gt;

&lt;p&gt;来自吴恩达的经典入门课程，不多说了。&lt;/p&gt;

&lt;h2 id=&quot;编译原理-compilers&quot;&gt;编译原理 compilers&lt;/h2&gt;

&lt;p&gt;本来是在 Cousera 上的，不过到了我看的时候，只有耶鲁自己的公开课平台有这门课程。&lt;/p&gt;

&lt;h2 id=&quot;自然语言处理-cs124&quot;&gt;自然语言处理 CS124&lt;/h2&gt;

&lt;h2 id=&quot;线性代数&quot;&gt;线性代数&lt;/h2&gt;

&lt;p&gt;经典之作，当时在学线代的时候跟着看的。和 3blue1brown 一起看效果非常好。有很多直观的理解。&lt;/p&gt;

&lt;h2 id=&quot;bitcoin-and-cryptocurrency-technologies&quot;&gt;Bitcoin and Cryptocurrency Technologies&lt;/h2&gt;

&lt;p&gt;Coursera，&lt;/p&gt;

&lt;p&gt;working on it.&lt;/p&gt;

&lt;h2 id=&quot;单变量微积分&quot;&gt;单变量微积分&lt;/h2&gt;

&lt;p&gt;当时是趁着复习微积分看的，然后考完微积分就基本没有再看过。不过讲的还是可以的。&lt;/p&gt;

&lt;h2 id=&quot;康德的理性哲学和实践哲学&quot;&gt;康德的理性哲学和实践哲学&lt;/h2&gt;

&lt;h2 id=&quot;公正该如何是好&quot;&gt;公正——该如何是好&lt;/h2&gt;

&lt;p&gt;二刷，墙裂推荐。&lt;/p&gt;

&lt;h2 id=&quot;计算机科学及编程导论&quot;&gt;计算机科学及编程导论&lt;/h2&gt;

&lt;p&gt;来自MIT，当时主要是当做听力的（顺便看看他们是怎么介绍计算机科学的基础的）。&lt;/p&gt;

&lt;h2 id=&quot;博弈论&quot;&gt;博弈论&lt;/h2&gt;

&lt;h2 id=&quot;计算机科学导论&quot;&gt;计算机科学导论&lt;/h2&gt;

&lt;p&gt;来自哈佛，作为导论课，可以在空闲的时候当做听力。&lt;/p&gt;

&lt;h2 id=&quot;理解马克思&quot;&gt;理解马克思&lt;/h2&gt;</content><author><name>FKY</name><email>loveress01@outlook.com</email></author><summary type="html">这篇文章记录自己对于公开课的学习和一些小收获。 《聆听音乐》 《Programming Language》 即可以作为国内传统科班计算机教育出身——也就是以 C 入门——的同学的进阶课程，也可以作为编程新手来了解程序语言本身魅力的入门课程。 函数式编程、类型系统、闭包、子类型与泛型、静态与动态等等等概念在这里都有所涉及。 Machine Learning 来自吴恩达的经典入门课程，不多说了。 编译原理 compilers 本来是在 Cousera 上的，不过到了我看的时候，只有耶鲁自己的公开课平台有这门课程。 自然语言处理 CS124 线性代数 经典之作，当时在学线代的时候跟着看的。和 3blue1brown 一起看效果非常好。有很多直观的理解。 Bitcoin and Cryptocurrency Technologies Coursera， working on it. 单变量微积分 当时是趁着复习微积分看的，然后考完微积分就基本没有再看过。不过讲的还是可以的。 康德的理性哲学和实践哲学 公正——该如何是好 二刷，墙裂推荐。 计算机科学及编程导论 来自MIT，当时主要是当做听力的（顺便看看他们是怎么介绍计算机科学的基础的）。 博弈论 计算机科学导论 来自哈佛，作为导论课，可以在空闲的时候当做听力。 理解马克思</summary></entry><entry><title type="html">不可预测的未来</title><link href="http://localhost:4000/2019/03/08/unpredict_future.html" rel="alternate" type="text/html" title="不可预测的未来" /><published>2019-03-08T00:54:38+08:00</published><updated>2019-03-08T00:54:38+08:00</updated><id>http://localhost:4000/2019/03/08/unpredict_future</id><content type="html" xml:base="http://localhost:4000/2019/03/08/unpredict_future.html">&lt;p&gt;记录一些自己这两年来关于计算机学习的思考和对未来的迷茫。&lt;/p&gt;

&lt;p&gt;施工中&lt;/p&gt;

&lt;p&gt;其实这一年多大多接触的都是软件工程的一些具体实践&lt;/p&gt;

&lt;p&gt;我承认，这些实践经历对于我来说确实弥足珍贵，它改变了我的思考方式，增强了我对于软件开发的全体布局的掌握。
也让我有机会把自己的想法落地为现实，提高生活效率。&lt;/p&gt;

&lt;p&gt;但是我也渐渐感受到，浅层的软件工程更像是熟练工种，这些工作和学历甚至学习经历都不是很相关。譬如一个前端框架，在掌握基本语法、概念的基础上，带着需求，认真研读文档、教程甚至代码，就可以在较短的时间内掌握并且投入生产。然而这和学生的定位是不太相符的。&lt;/p&gt;

&lt;p&gt;我并非是在说软件工程是一件简单的事情，我也深深地认同，一个好的框架的诞生，是真正的智慧的结晶，是目前的我无法企及的程度。&lt;/p&gt;

&lt;p&gt;但是对于一个还要在科研路上走下去的学生，我觉得仅仅注重软件开发是不恰当的。而且结合我国目前软件开发从业者的生存质量，我实在是万分心痛。&lt;/p&gt;

&lt;p&gt;正如我离开算法的原因一样，我觉得计算机的世界，不只有这些。
　
—&lt;/p&gt;

&lt;p&gt;然而这几年在计算机领域又有另一股旋风——机器学习。&lt;/p&gt;

&lt;p&gt;机器学习本质上是一种赋能。利用数学的力量（尤其是神经网络），让计算机拟合复杂的情况，从而对未知做出决策。（我知道还有聚类问题）。作为计算机科学与技术专业的学生，我觉得机器学习甚至人工智能，都是一个想在计算机世界继续探索下去的人不可回避的问题。&lt;/p&gt;

&lt;p&gt;然而当看着周围的人都狂热的卖出这一步时，我却有些胆怯。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>FKY</name><email>loveress01@outlook.com</email></author><summary type="html">记录一些自己这两年来关于计算机学习的思考和对未来的迷茫。 施工中 其实这一年多大多接触的都是软件工程的一些具体实践 我承认，这些实践经历对于我来说确实弥足珍贵，它改变了我的思考方式，增强了我对于软件开发的全体布局的掌握。 也让我有机会把自己的想法落地为现实，提高生活效率。 但是我也渐渐感受到，浅层的软件工程更像是熟练工种，这些工作和学历甚至学习经历都不是很相关。譬如一个前端框架，在掌握基本语法、概念的基础上，带着需求，认真研读文档、教程甚至代码，就可以在较短的时间内掌握并且投入生产。然而这和学生的定位是不太相符的。 我并非是在说软件工程是一件简单的事情，我也深深地认同，一个好的框架的诞生，是真正的智慧的结晶，是目前的我无法企及的程度。 但是对于一个还要在科研路上走下去的学生，我觉得仅仅注重软件开发是不恰当的。而且结合我国目前软件开发从业者的生存质量，我实在是万分心痛。 正如我离开算法的原因一样，我觉得计算机的世界，不只有这些。 　 — 然而这几年在计算机领域又有另一股旋风——机器学习。 机器学习本质上是一种赋能。利用数学的力量（尤其是神经网络），让计算机拟合复杂的情况，从而对未知做出决策。（我知道还有聚类问题）。作为计算机科学与技术专业的学生，我觉得机器学习甚至人工智能，都是一个想在计算机世界继续探索下去的人不可回避的问题。 然而当看着周围的人都狂热的卖出这一步时，我却有些胆怯。 TODO</summary></entry><entry><title type="html">Git Github Gitlab and CI</title><link href="http://localhost:4000/tutor/2019/03/07/git_github_gitlab_ci.html" rel="alternate" type="text/html" title="Git Github Gitlab and CI" /><published>2019-03-07T01:22:08+08:00</published><updated>2019-03-07T01:22:08+08:00</updated><id>http://localhost:4000/tutor/2019/03/07/git_github_gitlab_ci</id><content type="html" xml:base="http://localhost:4000/tutor/2019/03/07/git_github_gitlab_ci.html">&lt;p&gt;这篇文章是一次分享的大体提纲，因此有很多概念不会用文字详细解释。&lt;/p&gt;

&lt;p&gt;git的重要性便不在此赘述，为什么在网络上已经有丰富教程的前提下还要做这个东西，
就是希望大家（班里的同学们）大家能够尽可能站在一个水平线上，为以后的合作提供技术基础。&lt;/p&gt;

&lt;p&gt;不过，也请不要期待仅仅在两个小时之后就能上手全部的内容。&lt;/p&gt;

&lt;p&gt;因为坑注定是要自己踩才会有感觉。&lt;/p&gt;

&lt;h2 id=&quot;这篇文章不会涉及的内容&quot;&gt;这篇文章不会涉及的内容&lt;/h2&gt;

&lt;h3 id=&quot;git的安装&quot;&gt;git的安装&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/414ccd423efc&quot;&gt;Windows 安装&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000&quot;&gt;Mac/Linux/Windows 安装&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git的全部详解&quot;&gt;git的全部详解&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6&quot;&gt;Pro Git book&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github-ssh公钥设置&quot;&gt;github ssh公钥设置&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/9317a927e844&quot;&gt;Windows下公钥配置&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;git-版本控制器&quot;&gt;git 版本控制器&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2&quot;&gt;Git 简史&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;为什么使用git&quot;&gt;为什么使用git&lt;/h3&gt;

&lt;p&gt;你可能会经常遇到这样的情况：正在使用编辑器编写代码的时候，电脑突然死机了。&lt;/p&gt;

&lt;p&gt;当然重启以后发现这个文件并没有丢失，可问题是，如果有一百个文件，你要一个个确认吗？&lt;/p&gt;

&lt;p&gt;另外一个问题，当你在书写程序时，想要恢复一大段被删除的文字怎么办？&lt;/p&gt;

&lt;p&gt;还有，在多人合作时，你如何保证多个人分别开发不同的代码以后，能够安全的合并文件呢？&lt;/p&gt;

&lt;p&gt;存在网上？如果断网了呢？&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;略过&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;git是如何实现版本控制的&quot;&gt;git是如何实现版本控制的&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E5%9F%BA%E7%A1%80&quot;&gt;架构以及核心概念&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/distributed.png&quot; alt=&quot;架构&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://git-scm.com/book/en/v2/images/areas.png&quot; alt=&quot;工作区域&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何使用git&quot;&gt;如何使用git&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 先查看帮助呦&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
git add SOME_FILE
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SOME_COMMENT&quot;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;与之对应的四个阶段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-flowchart&quot;&gt;st=&amp;gt;start: git init || git clone|past
e=&amp;gt;end: 提出Pull Request 或 关闭相应issue
state0=&amp;gt;operation: 编辑文件
cond1=&amp;gt;condition: 文件
是否有改动
state1=&amp;gt;operation: git add [files]
cond2=&amp;gt;condition: 是否完成
一定功能的修改
state2=&amp;gt;operation: git commit [change messages]
cond3=&amp;gt;condition: 是否可以
提交至服务器
state3=&amp;gt;operation: git push
statefix=&amp;gt;inputoutput: git pull 并 解决冲突


st-&amp;gt;state0-&amp;gt;cond1-&amp;gt;state1-&amp;gt;cond2-&amp;gt;state2-&amp;gt;cond3-&amp;gt;state3-&amp;gt;e
cond1(yes)-&amp;gt;state1
cond1(no)-&amp;gt;state0
cond2(no)-&amp;gt;state0
cond2(yes)-&amp;gt;state2
cond3(yes)-&amp;gt;state3
cond3(no)-&amp;gt;statefix-&amp;gt;state0


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以一次提交为例&lt;/p&gt;

&lt;h3 id=&quot;其他的基本功能&quot;&gt;其他的基本功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;回滚 &lt;code class=&quot;highlighter-rouge&quot;&gt;revert&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;压缩 &lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;比较 &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;隐藏 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;子模块 &lt;code class=&quot;highlighter-rouge&quot;&gt;submodule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;说说分支与-git-的-workflow&quot;&gt;说说分支与 Git 的 Workflow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B&quot;&gt;分支&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一些底层的机理，可对照 &lt;code class=&quot;highlighter-rouge&quot;&gt;.git/objects/&lt;/code&gt; 目录下内容学习。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# generate checksum&lt;/span&gt;
git hash-object &amp;lt;file&amp;gt;
git cat-file &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &amp;lt;checksum&amp;gt;
&lt;span class=&quot;c&quot;&gt;# check type of object: commit blob tree&lt;/span&gt;
git cat-file &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;checksum&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从零开始创建一个 commit&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file-1.txt &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
file-1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file-2.txt &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
file-2
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# hash &amp;amp;&amp;amp; 存放入数据库 &lt;/span&gt;
git hash-object &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; file-1.txt 
&lt;span class=&quot;c&quot;&gt;# fbfd79f5e4816836f68f8128e9f99b12a0013a06&lt;/span&gt;

git hash-object &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; file-2.txt 
&lt;span class=&quot;c&quot;&gt;# 37ad5611998d92506ab38906d83810929f8c4a3d&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 此时 .git/objects/ 多了内容&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# -----&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# git add&lt;/span&gt;
git update-index &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cacheinfo&lt;/span&gt; 100644 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
fbfd79f5e4816836f68f8128e9f99b12a0013a06 file-1.txt

git update-index &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--cacheinfo&lt;/span&gt; 100644 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
37ad5611998d92506ab38906d83810929f8c4a3d file-2.txt

&lt;span class=&quot;c&quot;&gt;# 此时输入 git status，可以查看到暂存的内容&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ./git/index 文件诞生&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# -----&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 写入 tree 对象&lt;/span&gt;
git write-tree
&lt;span class=&quot;c&quot;&gt;# 85b5f8639b41a5ec4ba88381c358141105d3c50c&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 尝试更复杂一点，修改一下&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; file-1.txt &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
updated
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 写入数据库   &lt;/span&gt;
git hash-object &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; file-1.txt

&lt;span class=&quot;c&quot;&gt;# 写入暂存区（index）&lt;/span&gt;
git update-index &lt;span class=&quot;nt&quot;&gt;--cacheinfo&lt;/span&gt; 100644 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
519c15ed8d400dfa4be08f404a5c5b21ad6d4a7a file-1.txt

&lt;span class=&quot;c&quot;&gt;# 将之前的树也写入暂存区（index）&lt;/span&gt;
git read-tree &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bak 85b5f8639b41a5ec4ba88381c358141105d3c50c

&lt;span class=&quot;c&quot;&gt;# 此时试图 git status 会看见 bak/ 中 **有过** 文件，这就是上个命令产生的效果&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 写入 tree object&lt;/span&gt;
git write-tree
&lt;span class=&quot;c&quot;&gt;# b72c06c298832e50d22d218424f478515e73cea1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# git commit &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'first commit'&lt;/span&gt; | git commit-tree 85b5f8639b41a5ec4ba88381c358141105d3c50c
&lt;span class=&quot;c&quot;&gt;# 7ae4ed6a70d0e25ef14b7b46d9b0fb925849187f 会因为信息不同而不一样&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# second commit -&amp;gt; first&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'second commit'&lt;/span&gt; | git commit-tree b72c06c298832e50d22d218424f478515e73cea1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 7ae4ed   
&lt;span class=&quot;c&quot;&gt;# 97072885b3d1115edeef3fdfdc52e0f48f19f991 会因为信息不同而不一样&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 移动 master 指针&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;97072885b3d1115edeef3fdfdc52e0f48f19f991&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .git/refs/heads/master

&lt;span class=&quot;c&quot;&gt;# 此时 git log 可以看见提交&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/67afe711c731&quot;&gt;Git版本控制与工作流&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;git-的局限性以及-gitignore&quot;&gt;Git 的局限性以及 .gitignore&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;操作比较繁琐&lt;/li&gt;
  &lt;li&gt;无法彻底解决安全问题&lt;/li&gt;
  &lt;li&gt;无法有效的管理大二进制文件存储问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gitignore&quot;&gt;.gitignore&lt;/h3&gt;

&lt;p&gt;那些文件需要使用&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;本地依赖 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;编译的结果或者中间结果 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.out *.a *.o&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;隐私文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一些-faq&quot;&gt;一些 FAQ&lt;/h2&gt;

&lt;h3 id=&quot;有哪些与-git-相关的好用的工具&quot;&gt;有哪些与 Git 相关的好用的工具&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;VSCode (或者其他编辑器/IDE) 中的 Git 相关的插件，比如 GitLens&lt;/li&gt;
  &lt;li&gt;zsh 的 Git 插件等（alias）&lt;/li&gt;
  &lt;li&gt;git-cz (better commit)&lt;/li&gt;
  &lt;li&gt;tldr (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;tldr git-log&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gitignore.io/&quot;&gt;gitignore.io&lt;/a&gt; 帮助生成 .gitignore&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;我做了很多重复的提交如何压缩成一个&quot;&gt;我做了很多重复的提交，如何压缩成一个&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; HEAD~5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;想要强制覆盖远程仓库里的记录&quot;&gt;想要强制覆盖远程仓库里的记录&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;clone-时候速度快一些&quot;&gt;clone 时候，速度快一些&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;xxxxx&amp;gt; &lt;span class=&quot;nt&quot;&gt;--depth&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;这个-bug-谁写的&quot;&gt;这个 Bug 谁写的&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git blame &amp;lt;file&amp;gt;
git log &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;如何引白用嫖别人的项目&quot;&gt;如何引（白）用（嫖）别人的项目&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git submodule add &amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;想要撤销操作怎么办&quot;&gt;想要撤销操作怎么办&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git restore &amp;lt;file&amp;gt;
git restore &lt;span class=&quot;nt&quot;&gt;--staged&lt;/span&gt; &amp;lt;file&amp;gt;
git commit &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt;
git revert
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;有大文件怎么办&quot;&gt;有大文件怎么办&lt;/h3&gt;

&lt;p&gt;LFS&lt;/p&gt;

&lt;h3 id=&quot;如何发布-release&quot;&gt;如何发布 release&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git tag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;有些复杂的命令记不住&quot;&gt;有些复杂的命令记不住&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.last &lt;span class=&quot;s1&quot;&gt;'log -1 HEAD'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-merge-是最好的合并代码的方式么&quot;&gt;Git Merge 是最好的合并代码的方式么&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。
呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：不要对在你的仓库外有副本的分支执行变基。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;详细区别见&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;如果按照-git-的对每一个修改的文件-重新打包的方式会不会很占用空间&quot;&gt;如果按照 Git 的“对每一个修改的文件” 重新打包的方式，会不会很占用空间&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git gc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-%E5%8C%85%E6%96%87%E4%BB%B6&quot;&gt;包文件&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;github-软件源代码托管服务-大型同性交友社区&quot;&gt;github 软件源代码托管服务 &lt;del&gt;大型同性交友社区&lt;/del&gt;&lt;/h2&gt;

&lt;h3 id=&quot;为什么使用github&quot;&gt;为什么使用github&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;可视化&lt;/li&gt;
  &lt;li&gt;方便协作&lt;/li&gt;
  &lt;li&gt;大量优质项目&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;github中各个组件的功能以及使用技巧&quot;&gt;github中各个组件的功能以及使用技巧&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Issues&lt;/li&gt;
  &lt;li&gt;Project&lt;/li&gt;
  &lt;li&gt;Wiki&lt;/li&gt;
  &lt;li&gt;Pull Request&lt;/li&gt;
  &lt;li&gt;私人仓库&lt;/li&gt;
  &lt;li&gt;Fork&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/waylau/github-help/blob/master/Creating%20Releases%20%E5%88%9B%E5%BB%BA%E5%8F%91%E5%B8%83%E5%8C%85.md&quot;&gt;Release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人经验&lt;/p&gt;

&lt;h3 id=&quot;合作开发中需要注意的东西&quot;&gt;合作开发中需要注意的东西&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;协议（版权）&lt;/li&gt;
  &lt;li&gt;成员之间任务管理&lt;/li&gt;
  &lt;li&gt;利用好分支&lt;/li&gt;
  &lt;li&gt;利用其它插件 （以 Travis 为例）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以项目为例&lt;/p&gt;

&lt;p&gt;随便找几个有名的项目&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;gitlab-开源的-github&quot;&gt;GitLab “开源的 GitHub”&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;开源，可以部署私有在线代码仓库 &lt;a href=&quot;https://git.bitnp.net&quot;&gt;网协部署的校内 GitLab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;对 docker 相关部署做了集成
    &lt;ul&gt;
      &lt;li&gt;k8s 等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;更注重敏捷开发&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以项目为例&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git.bitnp.net/BITNP/clinic_django&quot;&gt;诊所预约管理系统&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;持续集成---ci&quot;&gt;持续集成 - CI&lt;/h2&gt;

&lt;p&gt;###　什么叫持续集成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2015/09/continuous-integration.html&quot;&gt;持续集成是什么?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/23444990&quot;&gt;如何理解持续集成、持续交付、持续部署？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;如何理解持续集成、持续交付、持续部署？&quot;&gt;简介持续集成（CI）以及相关工具推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;以github为例展示简单的持续集成&quot;&gt;以github为例展示简单的持续集成&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;原料
    &lt;ul&gt;
      &lt;li&gt;服务器（部署环境）、github、travis-ci、docker&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用方式
    &lt;ul&gt;
      &lt;li&gt;编写.travis.yml(配置文件)，脚本，&lt;del&gt;docker-compose&lt;/del&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;简单说说&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;一些展望&quot;&gt;一些展望&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;唠叨一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;安全&quot;&gt;安全&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CVE&lt;/li&gt;
  &lt;li&gt;管理权限 &lt;a href=&quot;https://www.zhihu.com/question/22438484&quot;&gt;百度、阿里、腾讯之类的大公司用 Git 吗？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;生产环境可能存在源码泄露&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;小练习&quot;&gt;小练习&lt;/h2&gt;

&lt;p&gt;以组为单位完成以下任意一个练习&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;创建自己的分支，提交代码，合并到主分支&lt;/li&gt;
  &lt;li&gt;从主分支拉取代码，进行修改并提交，利用Pull Request合并到主分支&lt;/li&gt;
  &lt;li&gt;审核别人的Pull Request，并且同意（拒绝）合并&lt;/li&gt;
  &lt;li&gt;提issues， 新建fix 分支（分支名为fix xxxx），修改提交后，合并并关闭issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上内容不分先后&lt;/p&gt;

&lt;h2 id=&quot;其他资料&quot;&gt;其他资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learngitbranching.js.org/&quot;&gt;在线学习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gogs.io/&quot;&gt;gogs 一个基于go语言的在线代码仓库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>FKY</name></author><category term="git" /><category term="github" /><category term="gitlab" /><category term="ci" /><category term="talk" /><category term="big pictrue" /><summary type="html">这篇文章是一次分享的大体提纲，因此有很多概念不会用文字详细解释。 git的重要性便不在此赘述，为什么在网络上已经有丰富教程的前提下还要做这个东西， 就是希望大家（班里的同学们）大家能够尽可能站在一个水平线上，为以后的合作提供技术基础。 不过，也请不要期待仅仅在两个小时之后就能上手全部的内容。 因为坑注定是要自己踩才会有感觉。 这篇文章不会涉及的内容 git的安装 Windows 安装 Mac/Linux/Windows 安装 git的全部详解 Pro Git book github ssh公钥设置 Windows下公钥配置 git 版本控制器 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。 Git 简史 为什么使用git 你可能会经常遇到这样的情况：正在使用编辑器编写代码的时候，电脑突然死机了。 当然重启以后发现这个文件并没有丢失，可问题是，如果有一百个文件，你要一个个确认吗？ 另外一个问题，当你在书写程序时，想要恢复一大段被删除的文字怎么办？ 还有，在多人合作时，你如何保证多个人分别开发不同的代码以后，能够安全的合并文件呢？ 存在网上？如果断网了呢？ 安装 略过 git是如何实现版本控制的 架构以及核心概念 如何使用git git --help # 先查看帮助呦 git init git add SOME_FILE git commit -m &quot;SOME_COMMENT&quot; git push 与之对应的四个阶段 st=&amp;gt;start: git init || git clone|past e=&amp;gt;end: 提出Pull Request 或 关闭相应issue state0=&amp;gt;operation: 编辑文件 cond1=&amp;gt;condition: 文件 是否有改动 state1=&amp;gt;operation: git add [files] cond2=&amp;gt;condition: 是否完成 一定功能的修改 state2=&amp;gt;operation: git commit [change messages] cond3=&amp;gt;condition: 是否可以 提交至服务器 state3=&amp;gt;operation: git push statefix=&amp;gt;inputoutput: git pull 并 解决冲突 st-&amp;gt;state0-&amp;gt;cond1-&amp;gt;state1-&amp;gt;cond2-&amp;gt;state2-&amp;gt;cond3-&amp;gt;state3-&amp;gt;e cond1(yes)-&amp;gt;state1 cond1(no)-&amp;gt;state0 cond2(no)-&amp;gt;state0 cond2(yes)-&amp;gt;state2 cond3(yes)-&amp;gt;state3 cond3(no)-&amp;gt;statefix-&amp;gt;state0 以一次提交为例 其他的基本功能 回滚 revert 压缩 rebase 比较 diff 隐藏 .gitignore 子模块 submodule 说说分支与 Git 的 Workflow 分支 一些底层的机理，可对照 .git/objects/ 目录下内容学习。 # generate checksum git hash-object &amp;lt;file&amp;gt; git cat-file -p &amp;lt;checksum&amp;gt; # check type of object: commit blob tree git cat-file -t &amp;lt;checksum&amp;gt; 从零开始创建一个 commit git init cat &amp;gt; file-1.txt &amp;lt;&amp;lt; EOF file-1 EOF cat &amp;gt; file-2.txt &amp;lt;&amp;lt;EOF file-2 EOF # hash &amp;amp;&amp;amp; 存放入数据库 git hash-object -w file-1.txt # fbfd79f5e4816836f68f8128e9f99b12a0013a06 git hash-object -w file-2.txt # 37ad5611998d92506ab38906d83810929f8c4a3d # 此时 .git/objects/ 多了内容 # ----- # git add git update-index --add --cacheinfo 100644 \ fbfd79f5e4816836f68f8128e9f99b12a0013a06 file-1.txt git update-index --add --cacheinfo 100644 \ 37ad5611998d92506ab38906d83810929f8c4a3d file-2.txt # 此时输入 git status，可以查看到暂存的内容 # ./git/index 文件诞生 # ----- # 写入 tree 对象 git write-tree # 85b5f8639b41a5ec4ba88381c358141105d3c50c # 尝试更复杂一点，修改一下 cat &amp;gt; file-1.txt &amp;lt;&amp;lt; EOF updated EOF # 写入数据库 git hash-object -w file-1.txt # 写入暂存区（index） git update-index --cacheinfo 100644 \ 519c15ed8d400dfa4be08f404a5c5b21ad6d4a7a file-1.txt # 将之前的树也写入暂存区（index） git read-tree --prefix=bak 85b5f8639b41a5ec4ba88381c358141105d3c50c # 此时试图 git status 会看见 bak/ 中 **有过** 文件，这就是上个命令产生的效果 # 写入 tree object git write-tree # b72c06c298832e50d22d218424f478515e73cea1 # git commit echo 'first commit' | git commit-tree 85b5f8639b41a5ec4ba88381c358141105d3c50c # 7ae4ed6a70d0e25ef14b7b46d9b0fb925849187f 会因为信息不同而不一样 # second commit -&amp;gt; first echo 'second commit' | git commit-tree b72c06c298832e50d22d218424f478515e73cea1 -p 7ae4ed # 97072885b3d1115edeef3fdfdc52e0f48f19f991 会因为信息不同而不一样 # 移动 master 指针 echo &quot;97072885b3d1115edeef3fdfdc52e0f48f19f991&quot; &amp;gt; .git/refs/heads/master # 此时 git log 可以看见提交 Git版本控制与工作流 Git 的局限性以及 .gitignore 操作比较繁琐 无法彻底解决安全问题 无法有效的管理大二进制文件存储问题 .gitignore 那些文件需要使用 本地依赖 node_modules 编译的结果或者中间结果 *.out *.a *.o 隐私文件 一些 FAQ 有哪些与 Git 相关的好用的工具 VSCode (或者其他编辑器/IDE) 中的 Git 相关的插件，比如 GitLens zsh 的 Git 插件等（alias） git-cz (better commit) tldr (e.g. tldr git-log) gitignore.io 帮助生成 .gitignore 我做了很多重复的提交，如何压缩成一个 git rebase -i HEAD~5 想要强制覆盖远程仓库里的记录 git push --force clone 时候，速度快一些 git clone &amp;lt;xxxxx&amp;gt; --depth 1 这个 Bug 谁写的 git blame &amp;lt;file&amp;gt; git log -p &amp;lt;file&amp;gt; 如何引（白）用（嫖）别人的项目 git submodule add &amp;lt;...&amp;gt; 想要撤销操作怎么办 git restore &amp;lt;file&amp;gt; git restore --staged &amp;lt;file&amp;gt; git commit --amend git revert 有大文件怎么办 LFS 如何发布 release git tag 有些复杂的命令记不住 git config --global alias.last 'log -1 HEAD' Git Merge 是最好的合并代码的方式么 git rebase 一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁——例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到 origin/master 上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。 呃，奇妙的变基也并非完美无缺，要用它得遵守一条准则：不要对在你的仓库外有副本的分支执行变基。 详细区别见教程 如果按照 Git 的“对每一个修改的文件” 重新打包的方式，会不会很占用空间 git gc 包文件 github 软件源代码托管服务 大型同性交友社区 为什么使用github 可视化 方便协作 大量优质项目 github中各个组件的功能以及使用技巧 Issues Project Wiki Pull Request 私人仓库 Fork Release 个人经验 合作开发中需要注意的东西 README.md 协议（版权） 成员之间任务管理 利用好分支 利用其它插件 （以 Travis 为例） 以项目为例 随便找几个有名的项目 GitLab “开源的 GitHub” 开源，可以部署私有在线代码仓库 网协部署的校内 GitLab 对 docker 相关部署做了集成 k8s 等 更注重敏捷开发 以项目为例 诊所预约管理系统 持续集成 - CI ###　什么叫持续集成 持续集成是什么? 如何理解持续集成、持续交付、持续部署？ 简介持续集成（CI）以及相关工具推荐 以github为例展示简单的持续集成 原料 服务器（部署环境）、github、travis-ci、docker 使用方式 编写.travis.yml(配置文件)，脚本，docker-compose 简单说说 一些展望 唠叨一下 安全 CVE 管理权限 百度、阿里、腾讯之类的大公司用 Git 吗？ 生产环境可能存在源码泄露 小练习 以组为单位完成以下任意一个练习 创建自己的分支，提交代码，合并到主分支 从主分支拉取代码，进行修改并提交，利用Pull Request合并到主分支 审核别人的Pull Request，并且同意（拒绝）合并 提issues， 新建fix 分支（分支名为fix xxxx），修改提交后，合并并关闭issues 以上内容不分先后 其他资料 在线学习 gogs 一个基于go语言的在线代码仓库</summary></entry><entry><title type="html">写给大家的计算机知识——为什么要用Markdown</title><link href="http://localhost:4000/2019/03/06/why_markdown.html" rel="alternate" type="text/html" title="写给大家的计算机知识——为什么要用Markdown" /><published>2019-03-06T01:22:08+08:00</published><updated>2019-03-06T01:22:08+08:00</updated><id>http://localhost:4000/2019/03/06/why_markdown</id><content type="html" xml:base="http://localhost:4000/2019/03/06/why_markdown.html">&lt;p&gt;一种新的工具从投入使用，到被人们所接受，不是没有原因的。工具，帮助人们简化复杂的任务，解放劳动力，&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;也是如此。&lt;/p&gt;

&lt;p&gt;如果你简单&lt;code class=&quot;highlighter-rouge&quot;&gt;google&lt;/code&gt;一下，你会发现网络中已经充斥着大量的&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;语法教程。
所以这篇文章的主要目的并不是教会你如何使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;，而是想试图让你知道，为什么不是计算机专业的同学，也有了解它的意义。&lt;/p&gt;

&lt;h2 id=&quot;所以我们面对着什么样的问题&quot;&gt;所以我们面对着什么样的问题？&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;首先，正如你看到的这篇文章一样，我们写作的内容越来越多地在互联网上以网页的形式分享（而不是其他方式）。&lt;/li&gt;
  &lt;li&gt;另一点，我们为了更良好的阅读体验，往往希望赋予文章更多的层次结构与标记，比如段落、标题、粗体、斜体、链接、图片、列表甚至表格。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;OK，幸运的是，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML/CSS&lt;/code&gt; 和浏览器的帮助下，我们能够完成这两点。&lt;/p&gt;

&lt;p&gt;简单的来说，你看到的一段文字：&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;我是标题&quot;&gt;我是标题&lt;/h3&gt;

&lt;p&gt;我是正文文字&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我是列表,&lt;em&gt;斜体&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;我是列表的第二项，&lt;del&gt;删除线&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;在浏览器接收到服务器的数据中，看起来是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    ...
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h3&amp;gt; 我是标题 &amp;lt;/h3&amp;gt;

        &amp;lt;p&amp;gt;我是正文文字&amp;lt;/p&amp;gt;

        &amp;lt;ul&amp;gt;
            &amp;lt;li&amp;gt;我是列表,&amp;lt;em&amp;gt;斜体&amp;lt;em&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;li&amp;gt;我是列表的第二项，&amp;lt;s&amp;gt;删除线&amp;lt;/s&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/ul&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;但是谁愿意直接写这样的代码呢！！？？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以回到问题本质，我们期待一种书写方式：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;它比纯文本的书写方式能够提供&lt;strong&gt;更多&lt;/strong&gt;的信息&lt;/li&gt;
  &lt;li&gt;它不能像代码那样及其抽象，要对普通用户也具有&lt;strong&gt;可读性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了满足以上要求，一大批&lt;strong&gt;标记性语言&lt;/strong&gt;诞生了。而&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;就是其中的佼佼者。&lt;/p&gt;

&lt;p&gt;想要达到例子中的效果，你只需要书写:&lt;/p&gt;
&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;### 我是标题&lt;/span&gt;

我是正文文字
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; 我是列表,&lt;span class=&quot;ge&quot;&gt;*斜体*&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; 我是列表的第二项，~~删除线~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;没错，是不是看上去好多了。&lt;/p&gt;

&lt;h2 id=&quot;什么是markdown&quot;&gt;什么是Markdown&lt;/h2&gt;

&lt;p&gt;如果你使用中文搜索，可能大概率会遇到介绍Markdown语法的文章，但是这不是这篇文章的重点。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Markdown is a lightweight markup language with plain text formatting syntax.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;引自wikipedia&lt;/p&gt;

&lt;h3 id=&quot;标记语言&quot;&gt;标记语言&lt;/h3&gt;

&lt;p&gt;我们注意一个关键词 &lt;code class=&quot;highlighter-rouge&quot;&gt;markup&lt;/code&gt;。如果你知道 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; 的话，就知道这两者中都含有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markup&lt;/code&gt; ——即 &lt;code class=&quot;highlighter-rouge&quot;&gt;标记&lt;/code&gt; 的含义。也就是说，不管是 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; ，甚至是 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt; ，他们都与我们接触的 &lt;code class=&quot;highlighter-rouge&quot;&gt;C语言&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt; 、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt;等完全不同。如果说后者是用来操纵数据的语言，那么前者更像是用来描述数据的语言。&lt;code class=&quot;highlighter-rouge&quot;&gt;标记&lt;/code&gt; 二字的精髓也在于此。&lt;/p&gt;

&lt;p&gt;所以你也能够明白为什么 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 对你是有价值的——因为尽管不是人人都需要会操纵数据，但是人们需要更好地描述信息。（正如这篇文章一样，如果都是白底黑字，岂不痛哉？）&lt;/p&gt;

&lt;h3 id=&quot;属于文本文件而不是二进制文件&quot;&gt;属于文本文件而不是二进制文件&lt;/h3&gt;

&lt;p&gt;请不要忽视另一个关键字&lt;code class=&quot;highlighter-rouge&quot;&gt;plain text&lt;/code&gt;，&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// TODO&lt;/code&gt;&lt;!-- // TODO --&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何使用-markdown&quot;&gt;如何使用 Markdown&lt;/h2&gt;

&lt;p&gt;看到这里，我假定你已经大致了解了&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;，但是也许你会有疑问，我怎样才能使用它呢。换句话说，在什么场合下、用什么工具，才能用好 &lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt; 呢。&lt;/p&gt;

&lt;h3 id=&quot;使用场景&quot;&gt;使用场景&lt;/h3&gt;

&lt;p&gt;以下是一些恰当的使用场景&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;计算机专业中 文档、教程 的写作&lt;/li&gt;
  &lt;li&gt;博客文章&lt;/li&gt;
  &lt;li&gt;需求丰富的个人笔记&lt;/li&gt;
  &lt;li&gt;电子书&lt;/li&gt;
  &lt;li&gt;笔记&lt;/li&gt;
  &lt;li&gt;日记&lt;/li&gt;
  &lt;li&gt;需要团队合作进行版本控制的场景（当然各种云doc也是推荐的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下是一些不太恰当的使用场景（欢迎补充）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;学术论文 （请使用Word 或者 LaTeX）&lt;/li&gt;
  &lt;li&gt;带有大量手工绘图需求的场景&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;方言与普通话&quot;&gt;方言与普通话&lt;/h3&gt;

&lt;h3 id=&quot;写作工具&quot;&gt;写作工具&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;VSCode&lt;/li&gt;
  &lt;li&gt;Typora&lt;/li&gt;
  &lt;li&gt;在线写作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;// TODO&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;</content><author><name>fky</name></author><category term="tutorial" /><category term="markdown" /><summary type="html">一种新的工具从投入使用，到被人们所接受，不是没有原因的。工具，帮助人们简化复杂的任务，解放劳动力，Markdown也是如此。 如果你简单google一下，你会发现网络中已经充斥着大量的Markdown语法教程。 所以这篇文章的主要目的并不是教会你如何使用Markdown，而是想试图让你知道，为什么不是计算机专业的同学，也有了解它的意义。 所以我们面对着什么样的问题？ 首先，正如你看到的这篇文章一样，我们写作的内容越来越多地在互联网上以网页的形式分享（而不是其他方式）。 另一点，我们为了更良好的阅读体验，往往希望赋予文章更多的层次结构与标记，比如段落、标题、粗体、斜体、链接、图片、列表甚至表格。 OK，幸运的是，在 HTML/CSS 和浏览器的帮助下，我们能够完成这两点。 简单的来说，你看到的一段文字： 我是标题 我是正文文字 我是列表,斜体 我是列表的第二项，删除线 在浏览器接收到服务器的数据中，看起来是这样： &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; ... &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h3&amp;gt; 我是标题 &amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;我是正文文字&amp;lt;/p&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;我是列表,&amp;lt;em&amp;gt;斜体&amp;lt;em&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;我是列表的第二项，&amp;lt;s&amp;gt;删除线&amp;lt;/s&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 但是谁愿意直接写这样的代码呢！！？？ 所以回到问题本质，我们期待一种书写方式： 它比纯文本的书写方式能够提供更多的信息 它不能像代码那样及其抽象，要对普通用户也具有可读性 为了满足以上要求，一大批标记性语言诞生了。而Markdown就是其中的佼佼者。 想要达到例子中的效果，你只需要书写: ### 我是标题 我是正文文字 - 我是列表,*斜体* - 我是列表的第二项，~~删除线~~ 没错，是不是看上去好多了。 什么是Markdown 如果你使用中文搜索，可能大概率会遇到介绍Markdown语法的文章，但是这不是这篇文章的重点。 Markdown is a lightweight markup language with plain text formatting syntax. 引自wikipedia 标记语言 我们注意一个关键词 markup。如果你知道 HTML 的话，就知道这两者中都含有 Markup ——即 标记 的含义。也就是说，不管是 Markdown ，甚至是 HTML ，他们都与我们接触的 C语言 、 Python 、 Java等完全不同。如果说后者是用来操纵数据的语言，那么前者更像是用来描述数据的语言。标记 二字的精髓也在于此。 所以你也能够明白为什么 Markdown 对你是有价值的——因为尽管不是人人都需要会操纵数据，但是人们需要更好地描述信息。（正如这篇文章一样，如果都是白底黑字，岂不痛哉？） 属于文本文件而不是二进制文件 请不要忽视另一个关键字plain text， // TODO 如何使用 Markdown 看到这里，我假定你已经大致了解了Markdown，但是也许你会有疑问，我怎样才能使用它呢。换句话说，在什么场合下、用什么工具，才能用好 Markdown 呢。 使用场景 以下是一些恰当的使用场景 计算机专业中 文档、教程 的写作 博客文章 需求丰富的个人笔记 电子书 笔记 日记 需要团队合作进行版本控制的场景（当然各种云doc也是推荐的） 以下是一些不太恰当的使用场景（欢迎补充） 学术论文 （请使用Word 或者 LaTeX） 带有大量手工绘图需求的场景 方言与普通话 写作工具 VSCode Typora 在线写作 // TODO 参考文献</summary></entry><entry><title type="html">Welcome</title><link href="http://localhost:4000/2018/07/01/welcome.html" rel="alternate" type="text/html" title="Welcome" /><published>2018-07-01T00:00:00+08:00</published><updated>2018-07-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/07/01/welcome</id><content type="html" xml:base="http://localhost:4000/2018/07/01/welcome.html">&lt;p&gt;If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:&lt;/p&gt;

&lt;p&gt;You may want to &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration&quot;&gt;config the site&lt;/a&gt; or &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/docs/en/writing-posts&quot;&gt;writing a post&lt;/a&gt; next. Please feel free to &lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/issues&quot;&gt;create an issue&lt;/a&gt; or &lt;a href=&quot;mailto:kitian616@outlook.com&quot;&gt;send me an email&lt;/a&gt; if you have any questions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;hr /&gt;

&lt;p&gt;If you like TeXt, don’t forget to give me a star. :star2:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kitian616/jekyll-TeXt-theme/&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/stars/kitian616/jekyll-TeXt-theme.svg?label=Stars&amp;amp;style=social&quot; alt=&quot;Star This Project&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>FKY</name><email>loveress01@outlook.com</email></author><category term="TeXt" /><summary type="html">If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost: You may want to config the site or writing a post next. Please feel free to create an issue or send me an email if you have any questions.</summary></entry><entry><title type="html">容器化技术在网络安全应用展望 – 并没有什么参考价值的节课论文</title><link href="http://localhost:4000/2018/05/16/security_of_container.html" rel="alternate" type="text/html" title="容器化技术在网络安全应用展望 -- 并没有什么参考价值的节课论文" /><published>2018-05-16T00:00:00+08:00</published><updated>2018-05-16T00:00:00+08:00</updated><id>http://localhost:4000/2018/05/16/security_of_container</id><content type="html" xml:base="http://localhost:4000/2018/05/16/security_of_container.html">&lt;p&gt;这是大一时参加《计算机与网络安全》所写的结课论文，
针对当时接触的 docker 容器化技术在安全方面做了一些简单不全面的总结。&lt;/p&gt;

&lt;p&gt;如今看起来还真是青涩呢。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;intro&quot;&gt;intro&lt;/h2&gt;

&lt;h3 id=&quot;写在前面的话&quot;&gt;写在前面的话&lt;/h3&gt;

&lt;p&gt;我接触并使用虚拟机是从高二时候开始的，而接触docker及容器化技术则是从今年的三月份开始的。我目前只是仅仅利用docker,dockerfile进行构建和部署较小的项目，刚开始在kubernetes中蹒跚学步，并未在生产环境中磨练过自己的’技艺‘。但是从我刚接触docker为代表的容器化技术开始，我就对其产生了浓厚的兴趣，它对于应用开发、测试和部署交出的答卷令人满意。就在这项从2013年才兴起的项目正在展露头角时，一个名为kubernetes的容器编排技术将容器化技术以更优雅和强大的姿态展现在人们眼前。在关注这项技术的同时，我结合这学期所学的网络安全相关内容,一直在思考:容器技术能带在网络安全方面有什么新应用呢?以下的内容只是出于一个大一学生的富有激情的浅见,若是有技术方面的问题还请谅解。&lt;/p&gt;

&lt;h3 id=&quot;网络安全&quot;&gt;网络安全&lt;/h3&gt;

&lt;p&gt;网络就像是一个又计算机组成的，独立于物理世界的虚拟世界。人们在这个世界变得更加隐秘，却也更加暴露。网络在带给人们的便捷不是没有代价的，人们需要将个人信息作为等价交换。而网站，作为提供服务和存储个人信息的媒介，无疑承担起了维护信息的保密性、完整性、可用性、真实性和可控性的所有任务。由于服务功能的复杂性上升和企业对于安全本身重视程度不够，生产环境中往往会有大量缺陷甚至漏洞存在。而这些漏洞一旦被攻击者恶意利用，轻则造成服务停摆，重则涉及隐私泄露，甚至危害到人身财产安全。因此网络安全的重要性日渐凸显。在软件层面，有防注入、过滤等技术；在操作系统层面，有虚拟化技术、防火墙安全策略等；在管理层面，有物理安全、权限控制等安全措施，可以说网络安全的是离不开任何一个环节的保障的。&lt;/p&gt;

&lt;h3 id=&quot;容器化技术&quot;&gt;容器化技术&lt;/h3&gt;

&lt;p&gt;容器化技术、以及虚拟化技术是一种被大家广泛认可的服务器资源共享方式。这些技术最初要解决的问题是不同软件所需服务器、网络、内存、存储等资源的隔离与服用问题。他将底层的资源打包、整合、抽象出来，打破实体结构间的独立性，让用户所面对着更统一隔离的资源。在虚拟化与容器化技术的发展中，人们不仅被这种技术所带来的经济效益给吸引，更发现由于有了抽象，使得底层资源从某种程度上被隐藏和隔离了起来，而这正是网络安全所寻找的一种防御手段。而在我们开始对容器化技术对网络安全的影响进行进一步探讨前，我们应当首先注意到他和以往虚拟化技术的相同与不同之处。&lt;/p&gt;

&lt;h4 id=&quot;容器化与虚拟化技术的异同&quot;&gt;容器化与虚拟化技术的异同&lt;/h4&gt;

&lt;p&gt;容器化技术和虚拟化技术，都实现了对资源的虚拟化和再分配。然而传统的虚拟化技术更加面向底层。以系统虚拟化技术为例，它会为用户提供一个完整的虚拟机：包括内核在内的一个完整操作系统镜像。cpu虚拟化技术为每个用户提供一个独享且和其他用户隔离的系统环境，虚拟层为每个用户分配虚拟化后的CPU、内存和IO设备资源。但是在提供高度隔离的环境同时，虚拟化技术所需要的独立的资源，对于很多场景下是资源极大的浪费。
于是以docker为首的容器化技术诞生了，它以容器为单位，为应用程序提供了隔离的完整的运行空间。但容器是作为一个进程而不是虚拟机来运行的。相比虚拟化技术，应用程序在其中的运行速度甚至可以达到原生级别，而对底层资源的复用也使得容器对于内存，cpu，硬盘的消耗小之又小。
容器化技术解决的另一大问题是良好的可移植环境与版本控制能力大大提升了软件开发、测试、部署和更新过程中所面临的一系列控制难题。它的硬件隔离复用与可自定义网络拓扑以及敏捷环境，为企业的敏捷开发、微服务、云服务提供了新的技术支持。
在网络安全层面，信息的可用性强调了速度与稳定性，完整性则强调了信息的保护程度，以下的表格比较了他们在这些方面的主要特性。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特点&lt;/th&gt;
      &lt;th&gt;虚拟化技术&lt;/th&gt;
      &lt;th&gt;容器化技术&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;物理资源消耗&lt;/td&gt;
      &lt;td&gt;Gb级别&lt;/td&gt;
      &lt;td&gt;Mb级别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;启动速度&lt;/td&gt;
      &lt;td&gt;分钟级&lt;/td&gt;
      &lt;td&gt;秒级&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;隔离程度&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;较虚拟化技术稍低一些&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;版本控制能力&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;部署速度&lt;/td&gt;
      &lt;td&gt;慢&lt;/td&gt;
      &lt;td&gt;快&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;技术成熟度&lt;/td&gt;
      &lt;td&gt;成熟&lt;/td&gt;
      &lt;td&gt;不成熟&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;运行平台&lt;/td&gt;
      &lt;td&gt;全部&lt;/td&gt;
      &lt;td&gt;偏向linux（借助了LXC）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;容器化技术对网络安全带来的影响&quot;&gt;容器化技术对网络安全带来的影响&lt;/h2&gt;

&lt;p&gt;本章节将从两个角度来入手这两者之间的关系。第一种是：利用容器化技术作为技术支持，安全防御将会得到怎样的优势。第二个角度是说，当我们开始利用容器化技术时，我们不得不开始面临哪些新的安全威胁。前者强调网络安全防御以及优势，后者强调容器技术本身的安全问题。本章节为了使结构更加清晰而选择这种方式，而读者应当注意其实上这两者是相互贯通的。&lt;/p&gt;

&lt;h3 id=&quot;容器化技术在网络安全方面的应用&quot;&gt;容器化技术在网络安全方面的应用。&lt;/h3&gt;

&lt;h4 id=&quot;隔离&quot;&gt;隔离&lt;/h4&gt;

&lt;p&gt;容器化技术首先提供的就是沙盒与隔离的机制。以docker为例，在linux内核中namespace的帮助下，进程拥有独立的主机与域名（UTS），信号量、消息队列和共享内存（IPC），进程编号（PID），网络设备、网络栈、端口(NETWORK)，文件系统（Mount），用户和用户组（User）。这样容器中的进程就会仿佛自己置身于独立的系统环境下，以达到独立与隔离的目的。
利用容器的隔离性，入侵者即使提权成功，依然会在沙箱环境中，依然面临着逃逸容器的难题，这将大大保护了同时运行在服务器上的其他容器中存储的重要信息与服务器安全。而且种种隔离性使得网络病毒无法进入主机，只要将容器关闭便可达到清理的目的，此时的操作对与其他容器不会有任何影响。&lt;/p&gt;

&lt;h4 id=&quot;更少的资源消耗&quot;&gt;更少的资源消耗&lt;/h4&gt;

&lt;p&gt;容器化技术在cpu，内存的访问效率和启动时间都要优秀与虚拟机。那么在面对着大量的请求甚至是恶意请求下，更能够保持系统的稳定性和信息的可用性。快速启动也使得容器技术在弹性服务，自动运维方面有着很好的应用前景。而名为kubernetes的容器集群的编排技术，可以自动实现负载均衡与容器规模控制，这使得企业可以快速得到一个高可用、高质量、健壮的生产环境。&lt;/p&gt;

&lt;h4 id=&quot;更快速更模块化的漏洞修复方式&quot;&gt;更快速更模块化的漏洞修复方式&lt;/h4&gt;

&lt;p&gt;容器技术支撑了微服务的发展，使得服务的更新可以在瞬间就完成。那么依靠这种方式，虽然容器化技术对漏洞发现的支撑取决于其上运行的软件，但是能保证对于漏洞修复的部署能够在极短的时间内完成，这对于信息的可用性无疑是有提升的。而像docker-compose这样的容器编排技术，kubernetes这样的自动化容器集训编排技术，利用yaml文档进行全部的容器配置工作，可以极其自由地将不同的容器耦合在一起，并进行快速稳定的部署。再加之容器化技术自定义的网络拓补结构，这使得网络安全相关的服务能够快速的被整合到原有的环境当中。&lt;/p&gt;

&lt;h4 id=&quot;对容灾的技术支持&quot;&gt;对容灾的技术支持&lt;/h4&gt;

&lt;p&gt;容器化技术并并不能直接完成复杂的容灾体系架构，但是它正在作为容灾体系的应用层被越来越多的用户接受。而对docker支持很好的Mesos等资源调度技术也与此同时被使用。&lt;/p&gt;

&lt;h3 id=&quot;在-mtd-中的可能性&quot;&gt;在 MTD 中的可能性&lt;/h3&gt;

&lt;h4 id=&quot;mtd是什么&quot;&gt;MTD是什么&lt;/h4&gt;

&lt;p&gt;网络安全一是易攻难守。在传统的网络安全防御手段中，由于代码量的庞大与软件功能的复杂，白箱子调试很难进行；而黑箱调试法则需要利用系统的输入输出进行测试。这不仅对于攻击用例的构造有极高的要求，还很难检测出未被发现的漏洞类型。这使得安全人员只能在漏洞被公布甚至被利用后，才能进行被动防御。因此动态目标防御（MTD）被提出，作为解决这一问题的全新思路。它的核心思想是利用可控的方式随机改变系统配置和结构，让攻击者难以发现目标，并且攻击面会在有效攻击方案形成之前发生转移，增加攻击者利用系统漏洞的难度。&lt;/p&gt;

&lt;h4 id=&quot;容器化技术之于mtd&quot;&gt;容器化技术之于MTD&lt;/h4&gt;

&lt;p&gt;容器化技术是一种应用技术，它的本身并不能给MTD提供新的动态防御的思路。但是以kubernetes为代表的自动化容器技术应该会是软件层面以及操作系统层面动态化的很好的解决方案之一。由于之前介绍的快速启动，资源占用小的特点，一个容器的创建，暂停，更新，删除都能在很短的时间内完成。而多应用环境和多操作系统的动态目标防御手段正好需要这样的特性。kubernetes的功能之一就是在保证容器对外一直可用的情况下，自动控制容器的规模，迭代。相信这点可以为服务器进行多环境的动态变化提供一个解决方案。&lt;/p&gt;

&lt;h2 id=&quot;容器技术本身的面临安全问题&quot;&gt;容器技术本身的面临安全问题&lt;/h2&gt;

&lt;p&gt;然而由于容器化技术本身不是面向安全而诞生的，而且它在市场中还远远不够成熟，因此我们不能忽视容器技术本身存在的安全问题。下面将列举一些最主要的问题，并试图提供解决方式。&lt;/p&gt;

&lt;h3 id=&quot;共用内核以及namespace本身不够完善导致隔离性不够&quot;&gt;共用内核以及namespace本身不够完善导致隔离性不够&lt;/h3&gt;

&lt;p&gt;容器并不是全封闭。由于内核使用、/sys、/proc等等未完全隔离，容器的隔离性要弱于传统的虚拟机。这导致攻击者更有可能逃离容器环境，查看到被保护的信息。当然，开源社区，包括红帽公司在内，在docker上提供了许多解决方案，比如文件系统级防护，Capability机制，SElinux的使用。另外工业界也提出了一些适配与加固容器的方案。目前认为经过加固后的容器是可以满足生产环境的要求的。&lt;/p&gt;

&lt;h3 id=&quot;使用了不可信的容器内容&quot;&gt;使用了不可信的容器内容&lt;/h3&gt;

&lt;p&gt;容器的镜像数据一般来自于源或者自行搭建。如果源不收信任，或者自行搭建时使用了有漏洞的依赖，就会导致容器程序中天然地含有恶意代码。这就需要项目团队在整个开发部署流程中时刻注意安全问题。&lt;/p&gt;

&lt;h3 id=&quot;docker自身漏洞&quot;&gt;docker自身漏洞&lt;/h3&gt;

&lt;p&gt;作为一款应用，docker本身也会有代码缺陷存在。CVE官方记录docker历史版本共有超过20项漏洞。而docker本身的版本更迭非常快，这就需要docker用户持续更新，而这对于生产环境并不是一件好事情。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;容器化技术在一定程度上取代虚拟机，来提供轻量而灵活的服务已经是大势所趋。当面对这样一项新技术时，我们应当怀着一种敢于尝试和迎接的态度来对待它。所以即使不知道容器化技术在网络安全方面终究会有怎样的作为，也应当积极尝试和学习。相信在不就得未来，网络安全能与容器化技术相互融合在一起，一同促进网络空间的建设与发展。&lt;/p&gt;</content><author><name>FKY</name></author><summary type="html">这是大一时参加《计算机与网络安全》所写的结课论文， 针对当时接触的 docker 容器化技术在安全方面做了一些简单不全面的总结。 如今看起来还真是青涩呢。</summary></entry><entry><title type="html">How to Learn Python 1</title><link href="http://localhost:4000/2017/08/26/how_to_learn_python_1.html" rel="alternate" type="text/html" title="How to Learn Python 1" /><published>2017-08-26T00:56:40+08:00</published><updated>2017-08-26T00:56:40+08:00</updated><id>http://localhost:4000/2017/08/26/how_to_learn_python_1</id><content type="html" xml:base="http://localhost:4000/2017/08/26/how_to_learn_python_1.html">&lt;h1 id=&quot;第一章在开始之前&quot;&gt;第一章——在开始之前&lt;/h1&gt;

&lt;h1 id=&quot;1学习方法&quot;&gt;1.学习方法&lt;/h1&gt;

&lt;h2 id=&quot;把握大致的学习路线&quot;&gt;把握大致的学习路线&lt;/h2&gt;

&lt;p&gt;目前的要做的事情其实很简单，主要包括&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;掌握Python的基础语法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这条是最基础的也是最好达成的，因为语法部分主要是记忆的东西&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;学会使用VScode或者其他编辑器书写Python&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个通过&lt;em&gt;经常使用&lt;/em&gt;就能达成，从模仿到理解&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;对相关的计算机知识有所了解&lt;/strong&gt;（就像计算机科学导论涉及的内容）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;计算机语言只是一个工具，关键在于要如何使用它，因此这时就需要编程者拥有一定的知识储备。放心，所有我们需要的答案都在网上，&lt;em&gt;世上无难事，只怕有心人&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;明确每一次的学习目标&quot;&gt;明确每一次的学习目标&lt;/h2&gt;

&lt;p&gt;在人们初学计算机语言的时候，往往会面对一大堆新的语法、新的知识而不知所措。&lt;/p&gt;

&lt;p&gt;殊不知与小白相比，那些有经验的程序员并非拥有更强的学习能力，而是他们形成了一套计算机领域的学习模式。&lt;/p&gt;

&lt;p&gt;而这种学习模式的关键就在于，&lt;strong&gt;清晰的学习目标&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我们可以将目标大致分为两种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;混个眼熟&lt;/li&gt;
  &lt;li&gt;比较熟练的掌握&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至于为什么不存在“精通”这一选项，是因为&lt;strong&gt;编程者不需要记忆每一个细节，只需要记忆如何找的这些细节&lt;/strong&gt;，编程不是考试，搜索引擎是鼓励使用的。（当然这段话有点绝对了）&lt;/p&gt;

&lt;p&gt;在第一次学习的时候，就要通过记忆和临摹代码达到&lt;strong&gt;混个眼熟&lt;/strong&gt;的境界。这时尽管会有一头雾水，但是一定要告诉自己这是正常现象，先往后学习。到了一定程度以后就能渐渐理解了。当然，之后就是熟练掌握。&lt;/p&gt;

&lt;p&gt;除了熟练度的目标之外，学习路线也给出了三个目标，在编程的时候，要注意提升这三个能力。&lt;/p&gt;

&lt;h2 id=&quot;相互参照印证&quot;&gt;相互参照、印证&lt;/h2&gt;

&lt;p&gt;大多数时候学不懂是教程的锅，因为当一个知识点没有前因后果的逻辑支撑时，人们就很难将知识点联系起来。最常见的表现就是在想：“这有什么意义？”。&lt;/p&gt;

&lt;p&gt;这个时候我们就不能仅仅拘泥与一份教程，应当从多个资源中整合出完整的信息。&lt;/p&gt;

&lt;p&gt;有必要的时候甚至可以看看官方文档&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;什么是官方文档&quot;&gt;什么是官方文档？&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;官方文档（documents）是关于这个项目/语言/软件最详细的定义和介绍，实际上整个项目/语言/软件的发展就是参考了官方文档。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python 有自己的官方文档（很棒），anaconda、VScode也有。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;官方文档告诉你每一个使用方式、使用细节、和最佳使用方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;但是大多数是英文哦&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;一般在&lt;strong&gt;官网&lt;/strong&gt;上以及&lt;strong&gt;google搜索&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*** 官方文档&lt;/code&gt;就能找到&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;当然初学者不需要一开始就使用，知道有这么个东西就好&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;兴趣驱动学习&quot;&gt;兴趣驱动学习&lt;/h2&gt;

&lt;p&gt;如果有了兴趣这个buff，学习真的是一件很有意思的事情&lt;/p&gt;

&lt;p&gt;而&lt;strong&gt;编程的兴趣是很容易创造的&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;想想看，你可以用Python制作一个&lt;strong&gt;网络爬虫&lt;/strong&gt;，爬取任何信息&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;再利用Python自带的库将&lt;strong&gt;数据处理&lt;/strong&gt;后输出成漂亮的图标，寻找其中的逻辑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;甚至还可以利用&lt;strong&gt;机器学习&lt;/strong&gt;，让机器对新的输入有了分析能力&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;此外，可以使用Python编写&lt;strong&gt;脚本&lt;/strong&gt;，代替原来重复的鼠标劳动&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;更美妙的是，以上内容的代码量都可以控制在100~200行，是其他语言的几分之一呢&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还有，你知道&lt;strong&gt;从excel读取信息&lt;/strong&gt;只需要一行代码么&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;del&gt;而且，你知道给编辑软件换不同的配色就像换装一样上瘾么&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后，你甚至可以和其他人&lt;strong&gt;一起开发&lt;/strong&gt;你们想要的东西&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有了这么多理由，学习就有了动力。&lt;/p&gt;

&lt;p&gt;而且编程不止有这些高大上的&lt;del&gt;幻想&lt;/del&gt;理想，还有很多有趣的小目标&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;比如运行以后输出hello world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在文件里输出hello world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果输对了用户名和密码就输出hello world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用网络输出hello world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输出彩色的hello world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;······&lt;del&gt;（怎么看上去这么无聊）&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;咳咳，总之：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;制定一个达得到的小目标&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用现有的能力和搜索到的知识完成它&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;获得成就感&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;2学习资源&quot;&gt;2.学习资源&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;名称&lt;/th&gt;
      &lt;th&gt;分类&lt;/th&gt;
      &lt;th&gt;评价&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;推荐指数&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://www.runoob.com/python3/python3-tutorial.html&quot;&gt;菜鸟教程&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;网站&lt;/td&gt;
      &lt;td&gt;比较基础和友好，我经常使用&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000&quot;&gt;廖雪峰Python3&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;网站&lt;/td&gt;
      &lt;td&gt;比菜鸟教程难一些，知识更深&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;博客园 and CSDN&lt;/td&gt;
      &lt;td&gt;博客网站&lt;/td&gt;
      &lt;td&gt;这两个博客网站里会有大量相关博客，用搜索引擎搜索知识点的时候就会看见&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.gitbook.com/book/lenkimo/byte-of-python-chinese-edition/details&quot;&gt;简明Python教程&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;书籍&lt;/td&gt;
      &lt;td&gt;网上都在推荐这个入门，我有时间也看看&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.python.org/3/&quot;&gt;官方文档&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;文档&lt;/td&gt;
      &lt;td&gt;强烈推荐在有学习一段时间后印证着阅读&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python语言程序设计&lt;/td&gt;
      &lt;td&gt;MOOC&lt;/td&gt;
      &lt;td&gt;没有看过，只能说正常吧（其实网课可以跳着看）&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://www.codecombat.cn/&quot;&gt;code combat&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;网站&lt;/td&gt;
      &lt;td&gt;这个适合霏哥&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://py.checkio.org/&quot;&gt;checkio&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;网站&lt;/td&gt;
      &lt;td&gt;这个跟acm的形式比较像（不过没有时间限制），应该很锻炼能力，适合进阶&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其实前五个初学的时候会比较常用，另外就是&lt;strong&gt;google&lt;/strong&gt;，因为有好多东西是你实际写代码的时候才需要的，这时候一定要搜一下，然后自己整理，融会贯通。&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;3anaconda-以及-vscode&quot;&gt;3.anaconda 以及 VScode&lt;/h1&gt;

&lt;p&gt;终于写到了这里。目前我是这两者都用的，因为从某种意义上他们可以互补。&lt;/p&gt;

&lt;h2 id=&quot;什么是anaconda&quot;&gt;什么是anaconda&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/58033789&quot;&gt;来自知乎的回答&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;简而言之：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;提供了包管理功能，Windows平台安装第三方包经常失败的问题得以解决&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;默认安装了很多好用的包&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;其中的Spyder 和 jupyter notebook是神器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;什么是vscode&quot;&gt;什么是VScode&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.jobbole.com/86576/&quot;&gt;文本编辑器&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;什么？你问什么是文本编辑器？&lt;/p&gt;

&lt;p&gt;有了它，你就不需要 &lt;em&gt;记事本&lt;/em&gt; 了&lt;/p&gt;

&lt;h2 id=&quot;安装及使用&quot;&gt;安装及使用&lt;/h2&gt;

&lt;p&gt;打算远程演示，因为内容确实比较多&lt;/p&gt;

&lt;p&gt;我会把笔记做在oneNote里？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/169403f7e40c&quot;&gt;anaconda入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;spyder 用来写大型项目？&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/86117613b7a6&quot;&gt;jupyter notebook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(jupyter notebook可以用来记笔记)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/docs&quot;&gt;VScode强烈推荐的官方文档（英）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jeasonstudio.gitbooks.io/vscode-cn-doc/content/&quot;&gt;VScode中文文档（正在施工？）&lt;/a&gt;%&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;2019-03-26&lt;/code&gt;，我使用VSCode写Python的概率远远高于其他编辑器&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>FKY</name><email>loveress01@outlook.com</email></author><category term="tutorial" /><category term="Python" /><summary type="html">第一章——在开始之前 1.学习方法 把握大致的学习路线 目前的要做的事情其实很简单，主要包括 掌握Python的基础语法 这条是最基础的也是最好达成的，因为语法部分主要是记忆的东西 学会使用VScode或者其他编辑器书写Python 这个通过经常使用就能达成，从模仿到理解 对相关的计算机知识有所了解（就像计算机科学导论涉及的内容） 计算机语言只是一个工具，关键在于要如何使用它，因此这时就需要编程者拥有一定的知识储备。放心，所有我们需要的答案都在网上，世上无难事，只怕有心人 明确每一次的学习目标 在人们初学计算机语言的时候，往往会面对一大堆新的语法、新的知识而不知所措。 殊不知与小白相比，那些有经验的程序员并非拥有更强的学习能力，而是他们形成了一套计算机领域的学习模式。 而这种学习模式的关键就在于，清晰的学习目标。 我们可以将目标大致分为两种 混个眼熟 比较熟练的掌握 至于为什么不存在“精通”这一选项，是因为编程者不需要记忆每一个细节，只需要记忆如何找的这些细节，编程不是考试，搜索引擎是鼓励使用的。（当然这段话有点绝对了） 在第一次学习的时候，就要通过记忆和临摹代码达到混个眼熟的境界。这时尽管会有一头雾水，但是一定要告诉自己这是正常现象，先往后学习。到了一定程度以后就能渐渐理解了。当然，之后就是熟练掌握。 除了熟练度的目标之外，学习路线也给出了三个目标，在编程的时候，要注意提升这三个能力。 相互参照、印证 大多数时候学不懂是教程的锅，因为当一个知识点没有前因后果的逻辑支撑时，人们就很难将知识点联系起来。最常见的表现就是在想：“这有什么意义？”。 这个时候我们就不能仅仅拘泥与一份教程，应当从多个资源中整合出完整的信息。 有必要的时候甚至可以看看官方文档 什么是官方文档？ 官方文档（documents）是关于这个项目/语言/软件最详细的定义和介绍，实际上整个项目/语言/软件的发展就是参考了官方文档。 Python 有自己的官方文档（很棒），anaconda、VScode也有。 官方文档告诉你每一个使用方式、使用细节、和最佳使用方法。 但是大多数是英文哦 一般在官网上以及google搜索*** 官方文档就能找到 当然初学者不需要一开始就使用，知道有这么个东西就好 兴趣驱动学习 如果有了兴趣这个buff，学习真的是一件很有意思的事情 而编程的兴趣是很容易创造的 想想看，你可以用Python制作一个网络爬虫，爬取任何信息 再利用Python自带的库将数据处理后输出成漂亮的图标，寻找其中的逻辑 甚至还可以利用机器学习，让机器对新的输入有了分析能力 此外，可以使用Python编写脚本，代替原来重复的鼠标劳动 更美妙的是，以上内容的代码量都可以控制在100~200行，是其他语言的几分之一呢 还有，你知道从excel读取信息只需要一行代码么 而且，你知道给编辑软件换不同的配色就像换装一样上瘾么 最后，你甚至可以和其他人一起开发你们想要的东西 有了这么多理由，学习就有了动力。 而且编程不止有这些高大上的幻想理想，还有很多有趣的小目标 比如运行以后输出hello world 在文件里输出hello world 如果输对了用户名和密码就输出hello world 利用网络输出hello world 输出彩色的hello world ······（怎么看上去这么无聊） 咳咳，总之： 制定一个达得到的小目标 利用现有的能力和搜索到的知识完成它 获得成就感 2.学习资源 名称 分类 评价 推荐指数 菜鸟教程 网站 比较基础和友好，我经常使用 5 廖雪峰Python3 网站 比菜鸟教程难一些，知识更深 4 博客园 and CSDN 博客网站 这两个博客网站里会有大量相关博客，用搜索引擎搜索知识点的时候就会看见 4 简明Python教程 书籍 网上都在推荐这个入门，我有时间也看看 4 官方文档 文档 强烈推荐在有学习一段时间后印证着阅读 5 Python语言程序设计 MOOC 没有看过，只能说正常吧（其实网课可以跳着看） 3 code combat 网站 这个适合霏哥 3 checkio 网站 这个跟acm的形式比较像（不过没有时间限制），应该很锻炼能力，适合进阶 3 其实前五个初学的时候会比较常用，另外就是google，因为有好多东西是你实际写代码的时候才需要的，这时候一定要搜一下，然后自己整理，融会贯通。 3.anaconda 以及 VScode 终于写到了这里。目前我是这两者都用的，因为从某种意义上他们可以互补。 什么是anaconda 来自知乎的回答 简而言之： 提供了包管理功能，Windows平台安装第三方包经常失败的问题得以解决 默认安装了很多好用的包 其中的Spyder 和 jupyter notebook是神器 什么是VScode 文本编辑器 什么？你问什么是文本编辑器？ 有了它，你就不需要 记事本 了 安装及使用 打算远程演示，因为内容确实比较多 我会把笔记做在oneNote里？ anaconda入门 spyder 用来写大型项目？ jupyter notebook (jupyter notebook可以用来记笔记) VScode强烈推荐的官方文档（英） VScode中文文档（正在施工？）% 在2019-03-26，我使用VSCode写Python的概率远远高于其他编辑器</summary></entry></feed>